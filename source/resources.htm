<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Resource Definitions - FHIR v[%version%]</title>
    <link rel="Stylesheet" href="fhir.css" type="text/css"/>
    <link rel="Stylesheet" href="fhir-print.css" type="text/css" media="print" />
</head>

<body>
[%sidebar%]

[%maindiv%]
[%resourcesheader%]

[%onthispage Resource Definitions#root|Resource Content#content|Bundles#bundles|Conformance#conformance|Resource References#references|Versioning#version%]

<a name="root"> </a>
<h1>Resource Definitions</h1>

<p>
A resource is an entity that:
</p>
<ul>
 <li>Has a known identity by which it can be addressed</li>
 <li>identifies itself as one of the resource types defined in this specification</li>
 <li>contains a set of structured data items as described by the resource definition</li>
 <li>contains a human readable XHTML representation of the content of the resource</li>
 <li>may change over time</li>
</ul>
<p>
Resources have multiple representations. A resource is valid if it meets that above rules, and is represented in 
either XML or JSON according to the rules defined in this specification. Other representations are allowed, but 
are not described by this specification.
</p>

<p>
This specification defines a series of different resource types that can be used to exchange and/or store data 
in order to solve a wide range of healthcare related problems, both clinical and administrative. In addition,
this specification defines several different ways of exchanging the resources.
</p>

<a name="content"> </a>
<h2>Contents of a Resource</h2>
<p>
All resources have the following aspects:
</p>
<ul>
 <li>A base set of defined data elements</li>
 <li>Extensions (optional) - additional data elements added by implementations (see <a href="extensibility.htm">"Extensibility"</a>)</li>
 <li>A human readable narrative description of the resource (see <a href="formats.htm#Narrative">"Narrative"</a>)</li>
 <li>Contained resources - additional resources that are part of the identification and transaction space of this resource (see <a href="#contained">below</a>)</li>
 <li>Metadata - important information about the resource that is not part of the content model of the resource</li>
</ul>
<p>
The contents of the base resource from which all other resources derive are:
</p>
<pre class="spec">
&lt;<a href="#content" title="A Resource Definition for FHIR" class="dict"><b>[Name]</b></a> xmlns="http://hl7.org/fhir"&gt;
 &lt;<a href="extensibility.htm" title="See Extensions" class="dict"><b>extension</b></a>&gt;<font color="Gray">&lt;!-- <font color="brown"><b>0..*</b></font> </font> <font color="darkgreen"><a href="extensibility.htm">Extension</a></font>   <a href="extensibility.htm"><font color="navy">See Extensions</font></a> <font color="Gray"> --&gt;</font>&lt;/extension&gt;
 &lt;<a title="The base human language of the resource content. The value can be any valid value following BCP 47" class="dict" href="resources-definitions.htm#Resource.language"><b>language</b></a> value="[<span style="color: darkgreen"><a href="datatypes.htm#code">code</a></span>]"/&gt;<span style="color: Gray">&lt;!--</span> <span style="color: brown"><b>0..1</b></span> <span style="color: navy">Human language of the content (BCP-47)</span><span style="color: Gray"> --&gt;</span>
 &lt;<a href="formats.htm#Narrative" title="Text summary of resource, for human interpretation" class="dict"><b>text</b></a>&gt;<font color="Gray">&lt;!--</font> <font color="brown"><b>1..1</b></font> <font color="darkgreen"><a href="formats.htm#Narrative">Narrative</a></font> <font color="navy">Text summary of resource, for human interpretation</font><font color="Gray"> --&gt;</font>&lt;/text&gt;
 &lt;<a href="#contained" title="See Contained Resources" class="dict"><b>contained</b></a>&gt;<font color="Gray">&lt;!-- <font color="brown"><b>0..*</b></font> </font> <font color="darkgreen"><a href="#contained">Resource</a></font>   <a href="#contained"><font color="navy">Contained Resources</font></a> <font color="Gray"> --&gt;</font>&lt;/contained&gt;
 <font color="Gray">&lt;!-- Defined Data Elements for Resource --&gt;</font>
&lt;/[Name]&gt;
</pre>
<p>
These elements must always appear in this order. These basic elements shared by all resources come first
in order to support consistent definitions for schema and UML derived code. 
</p>
<p>
The optional language element specifies the base language of the resource using the <a href="http://tools.ietf.org/html/bcp47">codes defined in BCP 47</a>.
Note that not all the content of the resource has to be in the language. 
If a language is specified, it should also be specified on the <a href="formats.htm#Narrative">Narrative Text</a>.
</p>

<a name="metadata"> </a>
<h2>Resource Metadata</h2>
<p>
The metadata properties are key aspects of the resource and how it behaves. For implementation reasons, these are represented outside the resource:
</p>

<table class="grid">
  <tr><th>Metadata Item</th><th>Type</th><th>Usage</th></tr>
  
  <tr><td>Logical Id</td> <td><a href="datatypes.htm#id">id</a></td> <td>The identity of the resource. 
    Resources always have a known identity and it is constant for the entire lifetime of the resource. Resource identification is <a href="#Identification">discussed further below</a></td></tr>
	
  <tr><td>Version Id</td><td><a href="datatypes.htm#id">id</a></td><td>Changed each time the content of the resource changes. 
    Can be referenced in a resource reference (<a href="#Resource">see below</a>). Can be used to ensure that updates are based on the latest version of the resource. 
  <br/>The version can be globally unique, or scoped by the Logical Id. Since version ids must be unique within the scope of a single resource, they are generally either a serially incrementing id 
     scoped by the logical id, or a uuid, though neither of these approaches is required</td></tr>
	 
  <tr><td>Last Modified Date</td><td><a href="datatypes.htm#instant">instant</a></td><td>Changed each time the content of the resource 
    changes. Can be used by a system or a human to judge the currency of the resource content. </td></tr>
	
</table>
<p>
In any environment where the resources are used, the technical details of how these metadata elements 
are represented will need to be resolved. For further details, see <a href="implementation.htm">Implementation 
Details</a>, which also contains a discussion of how resource identity is maintained.
</p>
<p>
Resource ids are case sensitive. Ids are always opaque, and systems need not and should not attempt to determine their internal structure. 
However the id is represented, it must always be represented in the same way in resource references and URLs. Ids can be up to 36 characters 
long, and contain any combination of ASCII letters, numerals, "-" and ".".
</p>

<hr/>
<a name="bundles"></a> 
<a name="bundle"></a> 
<h2>Resource Bundles</h2>
<p>
One common operation performed with resources is to gather a collection of resources into a single instance.
In FHIR this is referred to as "bundling" the resources together. The resource bundle is not just a list of 
references to resources, but includes their whole content. These resource bundles are useful for a variety of 
different reasons, including:
</p>
<ul>
  <li>Returning a set of resources that meet some criteria as part of a server operation</li>
  <li>Returning a set of versions of resources as part of the history operation on a server</li>
  <li>Storing a collection of resources</li>
  <li>Exchanging a set of resources as part of a message transaction</li>
  <li>Grouping a self-contained set of resources to act as an exchangeable and persistable group with clinical integrity (i.e. a clinical document)</li>
</ul>
<p>
Conceptually, a bundle has an identifier (url) and a date updated, and a list of resources. 
For each resource in the list, the bundle has the resource and also it's metadata as listed above.
Each entry in the bundle retains it's original identifier. This means that applications reading
the bundle should always look for a resource by it's identity (after converting relative URLs
absolute URL) in the bundle first before trying to access it by it's URL.
</p>


<hr/>
<a name="conformance"> </a>
<h2>Conformance</h2>
<p>
The contents of the resource and the formats used to represent it must conform to the rules described in this specification.
Because of it's general nature and wide applicability, the rules made in this specification are generally loose compared 
to the rules suitable for particular use cases. This specification provides a conformance layer that implementers and 
national/regional programs can use to provide a computable statement about how the resources and their exchange 
paradigms are used to solve particular use cases. This conformance layer is delivered through use of the 
<a href="conformance.htm">Conformance</a> and <a href="profile.htm">Profile</a> resources.
</p>
<p>
The specification also provides a number of technical resources that can assist with enforcing conformance 
to this base specification:
</p>
<ul>
 <li>Schema &amp; Schematron</li>
 <li>Reference Platforms</li>
 <li>TODO: RDF/OWL, etc</li>
</ul> 
<p>
Note that none of these are able to check complete conformance to this specification.
</p>
<p>
The data elements defined resources and data types have 4 properties that are 
directly related to conformance: Cardinality, Must-Understand, Must-Support, and Cardinality.
These interact to place conformance requirements on implementations. 
</p>

<a name="cardinality"> </a>
<h2>Cardinality</h2>
<p>
The cardinality of an element is to upper and limit of the number of elements
present in the actual resource. When present, elements cannot be empty - they must
have either a value attribute, child elements, or extensions. 
</p>

<a name="mustUnderstand"> </a>
<h3>Must-Understand</h3>
<p>
Must-Understand is a property that is assigned when an element is defined, either as part of 
the base resource contents in this specification, or where profiles declare extensions. 
An element is labelled "mustUnderstand=true" if the value it contains may change the interpretation of other elements or the resource as a whole. 
Typical examples of elements that are labelled "must-understand" are elements such as "status", "active", or "certainty". 
The value of mustUnderstand cannot be changed when element usage is described in a <a href="profile.htm">Resource Profile</a>.
</p>
<p>
Generally, elements labelled "mustUnderstand=true" also have a minimum cardinality of 1, to introduce
certainty in their handling. If the value of such an element is not explicit in the instance, or known 
by the context, the resource cannot be understood. Irrespective of the minimum cardinality, 
implementations producing resources SHALL ensure that appropriate values for mustUnderstand 
elements are provided. MustUnderstand elements SHALL be represented in the narrative summary of the resource.
</p>
<p>
Implementations processing resources SHALL understand the impact of the element when they process 
the resource. Implementations are not required to "support" the element in any meaningful way - they 
amy achieve this by rejecting instances that contain values outside those they support (for instance,
an application may refuse to accept observations with a reliability != "ok"). Alternatively,
implementations may be able to be sure, due to their implementation environment, that such values 
will never occur. However applications SHOULD always check the value irrespective of this.
</p>
<a name="mustSupport"> </a>
<h3>Must-Support</h3>
<p>
Labelling an element Must-Support means that implementations that produce or consume resources must 
provide "support" for the element in some meaningful way. Exactly what this means is impossible
to describe or clarify as part of the FHIR specification.
</p>
<p>
For this reason, the specification itself never labels any elements as must-support. 
This is done in <a href="profile.htm">Resource Profiles</a>, where the profile 
labels an element as mustSupport=true. When a profile does this, it must also make clear
exactly what kind of "support" is required, as this can mean many things.
</p>

<p>
Note that an element that has the property mustUnderstand is not necessarily a "key" element (e.g. one of 
the important elements to make use of the resource), nor is it automatically mustSupport - however both 
of these things are more likely to be true for mustUnderstand elements than for other elements.
</p>
<a name="cardinality"> </a>
<h3>Cardinality</h3> 
<p>
All elements defined in FHIR have a cardinality as part of their definition - a minimum number 
of required appearances, and a maximum number allowed. This number specifies the number of times
the element may appear in the instance. In the specification, the minimum number
is always 0 or 1, and the maximum number is always 1 or *, meaning no limit. Profiles may
use any whole number for both minimum and maximum cardinality, as long as minimum &lt;= maximum.
</p>
<p>
For elements that have cardinality &gt; 1, the order in which they appear may have meaning.
Unless the element definition (either in this specification or the extension) defines a meaning 
to the order explicitly, the meaning of the order is not defined, and implementations are allowed 
to reorder the elements. Note that you cannot define a meaning for the order of the elements in 
a profile. When there is not definition of the meaning of the order, implementations that need 
to choose a single element from a list of elements for some use must do so based on the semantics 
of the content of the elements that repeats. Profiles and Implementation guides may often make 
rules about this selection process.
</p>




<a name="ResourceReference"> </a>
<a name="Resource"> </a>
<a name="references"> </a>
<a name="Identification"> </a>
<h2>References between resources</h2>
<p>
The defined elements in a resource includes many references to other resources. 
The resources combine to build a web of information about healthcare. In a resource, 
references are represented with a type, a url, and a text description .
The key property of the reference is the <i>url</i> - resources are identified and address by their URL.
The actual reference looks like this(see <a href="formats.htm#syntax">"XML Format"</a>
for details of the way resource contents are described):
</p>

[%dt ResourceReference%]

<p>&nbsp;</p>

<p>Notes:</p>
<ul>
 <li>The reference must specify the resource type, whether or not the type of the resource reference is fixed for the element in the resource definition</li>
 <li>Using absolute URLs provides a stable scalable approach suitable for a cloud/web context, while using relative/logical references provides a 
   flexible approach suitable for use when trading across closed eco-system boundaries. (see <a href="implementation.htm#identity">implementation issues for further discussion</a>)</li>
 <li>Absolute URLs do not need to point to a <a href="http.htm">FHIR RESTful server</a>, though this is the preferred approach. If the tail of the url 
   conforms to the structure "/[type]/@[id]" or "/[type]/@[id]/history/@[id]"  then it should be assumed that the reference is to a <a href="http.htm">FHIR RESTful server</a>. 
   Whether or not the reference is to a FHIR RESTful server, the reference must point to a Resource as defined by this specification</li>
 <li>URLs are always considered to be case-sensitive and lowercase is preferred</li>
 <li>The <i>display</i> is generally not the same content as the Resource.text of the referenced resource.  The purpose is to 
   identify what's being referenced, not to describe it</li>
</ul>

<div class="use">
<p><b>Constraints</b></p>
<p>
[%dt.constraints ResourceReference%]
</p>
</div>

<div class="example">
<p>A relative reference to the <a href="patient.htm">patient</a> "034AB16" in an element named "context" on a FHIR RESTful server:</p>
<pre class="xml" fragment="ResourceReference">
  &lt;context&gt;
    &lt;type value="Patient" /&gt;
    &lt;url value="../patient/@034AB16" /&gt;
  &lt;/context&gt;
</pre>
<p>An absolute reference to a <a href="profile.htm">resource profile</a> in an element named "profile":</p>
<pre class="xml" fragment="ResourceReference">
  &lt;profile&gt;
    &lt;type value="Profile" /&gt;
    &lt;url value="http://fhir.hl7.org/svc/profile/@c8973a22-2b5b-4e76-9c66-00639c99e61b" /&gt;
  &lt;/profile&gt;
</pre>
<p><i>Note that HL7 has not yet actually created a profile registry, nor decided on a URL for it</i>.</p>
<p>
A short display text that provides a human readable identification of the resource may be provided:
</p>
<pre class="xml" fragment="ResourceReference">
  &lt;custodian&gt;
    &lt;type value="Organization" /&gt;
    &lt;url value="../organization/@123" /&gt;
    &lt;display value="HL7, Inc" /&gt;
  &lt;/custodian&gt;
</pre>
<p>
This text can be used by a system that is unable to resolve the reference to an actual resource.
</p>
</div>

<a name="contained"> </a>
<h3>Contained Resources</h3>
<p>
In some circumstances, the content referred to in the resource reference does not have an independent 
existence apart from the resource that contains it - it cannot be identified independently, and nor 
can it have it's own independent transaction scope. Typically, such circumstances arise where the resource
is being assembled by a secondary user of the source data, such as a middleware engine. If the data available
when the resource is constructed does not include record keys or absolute identification information, then
a properly identified resource cannot be assembled, and even if an arbitrary identification was associated
with it, the resource could never be the subject of a transaction outside the context of the resource that
refers to it.
</p>
<p>
In these circumstances, the resource is placed directly in line in the reference. <b>This should never be 
done when the content can be identified properly, as once identification is lost, it is extremely difficult 
(and context dependent) to restore it again.</b>
</p>
<div class="example">
<p>
An example of a contained resource:
</p>
<pre class="xml"> <!-- Can't fragment test this - too incomplete -->
 &lt;Document xmlns="http://hl7.org/fhir"&gt;
  &lt;extension&gt;...&lt;/extension&gt;
  &lt;text&gt;...&lt;/text&gt;
  &lt;contained&gt;
    &lt;Organization id=&quot;org1&quot;&gt;
      &lt;!-- whatever information is available --&gt;
    &lt;/Organization&gt;
  &lt;/contained&gt;
  &lt;information&gt;
    &lt;!-- other attributes --&gt;
    &lt;custodian&gt;
      &lt;type value="Organization" /&gt;
      &lt;url value="#org1" /&gt;
    &lt;/custodian&gt;
    &lt;!-- other attributes --&gt;
  &lt;information&gt;
 &lt;/Document&gt;
</pre>
<p>
The same example in JSON:
</p>
<pre class="json"> 
{ "Document" : {
  "extension" : { ... },
  "text" : { .. },
  "contained: [
    {"Organization" : {
      "_id" : "org1",
      .. whatever information is available ...
	}}
  ]
  "information: {
    ... other attributes ...
    "custodian" : {
      "type" : { "value" : "Organization" },
      "url" : { "value" : "#org1" }
	}
    ... other attributes ...
  }
}}
</pre>
</div>

<p>
The type and url are always required, even though somewhate redundant in this case, to ensure that a
single approach to resolving resource references can be used - simply be resolving the URL, and accessing
accordingly.
</p>
<p>
Some notes about use and interpretation of contained resources:
</p>

<ul>
  <li>Contained resources share the same internal id resolution space as the parent resource</li>
  <li>Resources that are contained inline also "inherit" context from their parent resource. For instance, if 
    the parent resource contains a "subject", and the contained resource also has a a subject element defined, 
    but does not specify any subject, a processing application may infer that the subject is the same. Note,
    however, that such inferences are specific to a particular circumstance. There is no rule, for instance, 
	that the meaning of the "subject" element is the same in both parent and contained resources</li>
  <li>Contained resources do not need to contain any narrative</li>
</ul>

<a name="version"> </a>
<h2>Inter-version Compatibility</h2>
<p>
There is no explicit version marker in the resource content. 
Subsequent versions of this specification may introduce new elements and/or content 
at any point in the resource contents, but the path and meaning of existing data 
elements will not be changed. 
</p>
<p>
The conformance layer (<a href="conformance.htm">Conformance</a> and <a href="profile.htm">Profile</a>)
have mandatory properties declaring the FHIR specification version, and these may be used to assist 
with implementation versioning considerations.
</p>
<p>
In a typical scenario, mixed versions may need to exist, so applications SHOULD ignore elements 
that they do not recognize unless they are extensions with a mustUnderstand element with value="true". 
However, in a healthcare context, many application vendors are unwilling to 
consider this approach because of concerns about clinical risk or 
technical limitations in their software (i.e. schema based processing). 
Applications are not required to ignore unknown elements, but must
declare whether they will do so in their conformance statements using the <i>acceptUnknown</i> element.
</p>

[%footer%]


[%/maindiv%]    
</body>
</html>