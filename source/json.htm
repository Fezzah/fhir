<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>JSON Format - FHIR v<%version%></title>
    <link rel="Stylesheet" href="fhir.css" type="text/css"/>
    <link rel="Stylesheet" href="fhir-print.css" type="text/css" media="print" />
</head>

<body>
<%sidebar%>


<%maindiv%>
<%pageheader%>

<a name="json"></a>
<h1>JSON Format</h1>
<p><i>Informative Section: Due to a series of issues around the formal standardization of 
the JSON representation, the standard JSON representation for resources is only informative.</i></p>

<p>
Though the formal representation of the resources is in XML, many systems wish to use 
JSON to exchange the resources and it is useful to standardise a single JSON format for 
this use. The JSON format for the resources follows the standard XML format closely so
XPath queries can easily be mapped to query the JSON structures:</p>
<ul>
<li>The names for the JSON object members are the same as the names of the elements
and attributes in XML, including for elements that may repeat.</li>
<li>In the data types, the value representations for <a href="datatypes.htm#primitive">primitive types</a>
such as string, decimal, etc. are identical between the XML and the JSON form 
(including instant, which is represented as plain text, not in one of the proposed JSON custom date formats)</li>
<li>Just as in XML, JSON property attributes never have empty values; omit a value if it is empty.</li>
</ul>
<p>There are differences too:</p>
<ul>
<li>There are no namespaces in the JSON representation.</li>
<li>JSON does not have a notion of attributes versus elements, so FHIR's only attributes (dataAbsentReason and id)
are treated as JSON object members (see below for more details).</li>
<li>JSON has a notation for arrays, which are used to represent repeating elements. Note that this is
the case, even if they do not repeat in the actual instance.</li>
<li>The XHTML &lt;div&gt; element in the Narrative datatype is represented as a single escaped string of XHTML</li>
</ul>
<p>These differences - particularly the repeating element one, which cannot be avoided - ensure that generic XML --&gt; JSON converters are not 
able to perform correctly. The reference platforms will provide XML &lt;--&gt; JSON conversion functionality.</p>

<h2>JSON representation of primitive types</h2>
<p>
FHIR elements with primitive values are represented as JSON object members of the same name, with their value encoded
as a string. Native JSON types other than "string" are never used, to guarantee equivalence of the serialized representation
between XML and JSON.</p>
<p>
Primitive elements used inside the FHIR datatypes cannot have an 'id' or 'dataAbsentReason' attribute, so 
they are rendered in JSON as a property and value:
</p>
<pre class="xml">
 &lt;<b>date</b>&gt;1972-11-30&lt;/<b>date</b>&gt;
</pre>
<p>is represented in JSON as</p>
<pre class="json">
"date": "1972-11-30"
</pre>
<p>Primitive elements inside resources <i>can</i> have 'id' or (if allowed) 'dataAbsentReason' attributes, 
so their JSON representation uses a JSON object with members '_id', 'dataAbsentReason' and 'value', which
contains the actual primitive value as string. Note that in most cases, the primitive will not have a value
when there is a dataAbsentReason present, in which case the special 'value' member must not be present. So,</p>
<pre class="xml">
 &lt;<b>dob</b> id='314159'&gt;1972-11-30&lt;/<b>dob</b>&gt;
</pre>
<p>is represented in JSON as:</p>
<pre class="json">
"dob": { "_id": "314159", "value": "1972-11-30" }
</pre>
<p>while this example would look like this in the case of a dataAbsentReason:</p>
<pre class="json">
"dob": { "_id": "314159", "dataAbsentReason": "Unknown" }
</pre>

<h2>Repeating elements</h2>
<p>Repeating elements are rendered withing a JSON array with the name of the element, so a repeating
&lt;dob&gt; element in</p>
<pre class="xml">
 &lt;<b>dob</b>&gt;2011-11-30&lt;/<b>dob</b>&gt;
 &lt;<b>dob</b> id='314159'&gt;1972-11-30&lt;/<b>dob</b>&gt;
</pre>
<p>is represented in JSON like so:</p>
<pre class="json">
"dob": [
	{ "value": "2011-11-30" },
	{ "_id": "314159", "value": "1972-11-30" }
  ]
</pre>

<h2>JSON representation of composite datatypes</h2>
<p>Resources and other composite datatypes (types that contain named elements of other types) are represented using 
a JSON object, containing a member for each element in the datatype. Composites can have id's and dataAbsentReasons, 
therefore these attributes get converted to JSON members values, in the same manner as described for primitives. These members will be 
placed before all other members. For example:</p>
 <pre class="xml">
&lt;Person&gt;
  &lt;id&gt;34234&lt;/&gt;
  &lt;name&gt;
    &lt;use&gt;official&lt;/use&gt;  
    &lt;part&gt;
      &lt;type&gt;given&lt;/type&gt;
      &lt;value&gt;Karen&lt;/value&gt;
    &lt;/part&gt;
    &lt;part id=&quot;n1&quot;&gt;
      &lt;type&gt;family&lt;/type&gt;
      &lt;value&gt;Van&lt;/value&gt;
    &lt;/part&gt;
  &lt;/name&gt;
  &lt;text&gt;
    &lt;status&gt;generated&lt;/status&gt;
    &lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;...&lt;/div&gt;
  &lt;/text&gt;
&lt;/Person&gt;
</pre>
<p>is represented in JSON as:</p>
<pre class="json">
{
  "Person" : {
    "id" : { "value" : "34234" },
    "name" : [{
      "use" : "official",
      "part" : [
        {
          "type" : "given",
          "value" : "Karen" 
        },
        {
           "_id" : "n1",
           "type" : "family",
           "value" : "van"
        }]
     }],
    "dob" : { "dataAbsentReason" : "notasked" },
    "language" : [
      {
        "code" : { "_id" : "lang-1", "value" : "dut" },
        "use" : { "value" : "fluent" }
      },
      {
        "code" : { "value" : "cmn" },
        "use" : { "value" : "useable" }
      }],
    "text" : {
      "status" : "generated",
      "value" : "&lt;div xmlns='http://www.w3.org/1999/xhtml'&gt;...&lt;/div&gt;"
    }
}
</pre>
<p>Things to note here are:</p>
<ul>
<li>Because the primitive element 'id' is in a resource, it is serialized as a JSON object.</li>
<li>In the family part of 'name', the '_id' is added as the first member.</li>
<li>The 'code' within member 'language' is a part of the resource definition and therefore serialized
as a JSON object, whereas the member 'use' within 'name' is a primitive inside a datatype and therefore
serialized as a JSON string value.</li>
<li>The XHTML content in the 'div' element which is in the Narrative element 'text' is represented 
as an escaped string in the value property in JSON. The xhtml's root element needs to be a &lt;div&gt; in the xhtml namespace.</li>
</ul>

<a name="json-bundles"></a>
<h2>JSON Bundles (Atom feeds)</h2>
<p>There are several initiatives to define a JSON format for <a href="atom.htm">Atom</a>, all of which are are suffering from having to simulate properties, 
namespaces and other xml-specific features. Instead, FHIR defines a JSON format that is tailored to the specific needs for bundles.
Each element in the Xml feed definition has a JSON corresponding JSON object member with the same name. Here is an example feed returning search results for a person query:</p>

<pre class="json">
{
  &quot;title&quot; : &quot;Search result&quot;,
  &quot;updated&quot; : &quot;2012-09-20T12:04:45.6787909+00:00&quot;,
  &quot;id&quot; : &quot;50ea3e5e-b6a7-4f55-956c-caef491bbc08&quot;,
  &quot;link&quot; : [{
      &quot;rel&quot; : &quot;self&quot;,
      &quot;href&quot; : &quot;http://ip-0a7a5abe:16287/fhir/person?format=json&quot;
    }],
  &quot;entry&quot; : [{
      &quot;title&quot; : &quot;Resource of type Person, with id = 1 and version = 1&quot;,
      &quot;link&quot; : [{
          &quot;rel&quot; : &quot;self&quot;,
          &quot;href&quot; : &quot;http://fhir.furore.com/fhir/person/@1/history/@1&quot;
        }],
      &quot;id&quot; : &quot;http://fhir.furore.com/fhir/person/@1&quot;,
      &quot;updated&quot; : &quot;2012-05-29T23:45:32+00:00&quot;,
      &quot;published&quot; : &quot;2012-09-20T12:04:47.3012429+00:00&quot;,
      &quot;author&quot; : [{
          &quot;name&quot; : &quot;Grahame Grieve / HL7 publishing committee&quot;
        }],
      &quot;category&quot; : [{
          &quot;term&quot; : &quot;Person&quot;,
          &quot;scheme&quot; : &quot;http://hl7.org/fhir/resource-types&quot;
        }],
      &quot;content&quot; : {
        &quot;Person&quot; : { ...person content in JSON... }
      },
      &quot;summary&quot; : &quot;&lt;div xmlns=\&quot;http://www.w3.org/1999/xhtml\&quot;&gt;(text summary)&lt;/div&gt;&quot;,
      &quot;version&quot; : &quot;1&quot;
    }, ... other entries ....
  ]
}
</pre>

<p>
Note that property names for elements that can repeat are not pluralised for consistency of overall approach.
</p>

<h2>Bundling versions - deletion</h2>
<p>
When returning a set of versions for a resource, a version might indicate a <i>deletion</i>. 
While the XML format follows <a href="http://www.rfc-editor.org/rfc/rfc6721.txt">RFC 6721</a>,
the JSON format needs to use an entry item to retain the logical order of entries:</p>
<pre class="json">
   .. feed ..
   &quot;entry&quot; : [
    ... other entries ....,    
    {
      &quot;deleted&quot; : &quot;2012-05-29T23:45:32+00:00&quot;,
      &quot;id&quot; : &quot;http://fhir.furore.com/fhir/person/@1&quot;,
      &quot;link&quot; : [{
          &quot;rel&quot; : &quot;self&quot;,
          &quot;href&quot; : &quot;http://fhir.furore.com/fhir/person/@1/history/@1&quot;
        }],
    }, ... other entries ....
  ]
  ... feed ...
</pre>
<p>
The entry is known to be deleted because a date of deletion is given. An id must be provided, and a link may be provided.
</p>

<a name="Binary"> </a>
<h2>Binary Resources</h2>
<p>
There are situations where it is useful or required to represent binary resources in the bundle. These are resources that are referred to from FHIR Resources (usually via a URI),
and where it is convenient to include these in the feed directly rather than leaving them by reference.
</p>
<p>
When binary resources are represented in the feed, they are enclosed as base64 encoded content along with a content-type, which is the mime-type as it would be specified in HTTP:
</p>
<pre class="json">
  ...
      &quot;content&quot; : {
        &quot;Binary&quot; : {
          &quot;contentType&quot; : &quot;[mime type]&quot;,
          &quot;content&quot; : &quot;[base64 of data]&quot;
        }
      },
      &quot;summary&quot; : &quot;&lt;div xmlns=\&quot;http://www.w3.org/1999/xhtml\&quot;&gt;Binary Resource&lt;/div&gt;&quot;
  ...
</pre>
<p>
The summary should be some equivalent to "Binary Resource" in an appropriate language.
</p>

<%footer%>
<%/maindiv%>    
</body>
</html>