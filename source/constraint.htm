<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Constraint Statement - FHIR v<%version%></title>
    <link rel="Stylesheet" href="fhir.css" type="text/css" media="screen" />
</head>

<body>
<%header%>
<%sidebar%>


<%maindiv%>
todo: invariants

<h1>Constraint</h1>
<p>
This specification describes a set of base resources that are used in many different
contexts in healthcare. In order to make this manageable, applications need to be
able to provide a structured statement of which elements of a resource are used, 
and how. In addition the existing elements, the use of extensions also needs to
be described. These structured statements are actually constraint statements that
describe a particular pattern of usage. As a general tool, they find use in several different
contexts:
</p>
<ul class="dense">
 <li>Describing testable conformance rules for applications that read and write FHIR resources</li>
 <li>Making rules about how information is represented in jurisdictions and institutions</li>
 <li>Describing common clinical patterns of use of general resources</li>
</ul>
<p>
The final form of these conformance descriptions is a constraint statement, which may 
be used at run time to assist with application to application negotiation, or it may 
be used at design time or even purchase time to assist implementers to understand the 
capabilities of the system. This specification uses the general constraint statement 
defined here in 4 contexts:
</p>
<ul>
 <li><a href="conformance.htm">Conformance Resource</a>: a statement of functionality for a <a href="http.htm">RESTful server or client</a></li>
 <li><a href="messageconformance.htm">Messaging End-Point Description</a>: a statement of services provided or consumed by a <a href="messaging.htm">messaging interface</a> </li>
 <li><a href="documentconformance.htm">Document Specification</a>: a description of the contents of a set of resources aggregated into a <a href="documents.htm">document</a></li>
 <li><a href="profile.htm">Resource Profile</a>: a description of how a resource is used in a particular way - often used as Clinical Templates, which </li>
</ul>
<p>
The constraint statement is a fixed XML format that is used to represent the core part of 
these various descriptions of use, which is the actual contents of a resource. 
</p>
<h2>Unpicking</h2>
<p>
One common operation in a constraint statement is to take an element that may occur more
than once, and describe a series of different constraints on the elements in the list. 
In this way, the list is split into a series of individual elements or sub-lists. 
In FHIR, this operation is known as "unpicking" a list. Here is an example to illustrate the 
process:
</p>
<table class="list">
 <tr>
  <th>Resource Definition</th>
  <th>&nbsp;</th>
  <th style="border-left: 1px solid gray">&nbsp;</th>
  <th>Profile for Acme, Inc</th>
 </tr>
 <tr>
  <td>relationship [0..*] <br/>&nbsp;&nbsp;type : Coding<br/>&nbsp;&nbsp;name : string</td>
  <td>&nbsp;</td>
  <td style="border-left: 1px solid gray">&nbsp;</td>
  <td>
   parent [1..2] <br/>&nbsp;&nbsp;type = PAR<br/>&nbsp;&nbsp;name...<br/>
   guardian [0..1] <br/>&nbsp;&nbsp;type = GUARD<br/>&nbsp;&nbsp;name...<br/>
   child [0..6] <br/>&nbsp;&nbsp;type = CHILD<br/>&nbsp;&nbsp;name...<br/>
  </td>
 </tr>
</table>
<p>
In this example, the resource definition defines the relationship element which may occur
multiple times. The profile for Acme, Inc constrains the relationships into 3 different kinds: 
1 or 2 parents, up to 6 children, and maybe a guardian. No other relationships are supported
by the Acme system. 
</p>
<p>
Note that in FHIR, only the resource is ever actually exchanged. The profile describes a way of 
using the resource, but the item profile names ("parent", etc in this list) are never exchanged.
In order the unpicking to be useful, systems must be able to determine which 
relationships in the relationship list that is actually exchanged are parent, child, or 
guardian; in this particular case, the determination is achieved by fixing the value of the 
relationship type element. Fixing a code value is the most common way to unpick a list.
</p>

<a name="Constraint"></a>
<h2>Constraint Statement</h2>

<p>
Note that the context of appearing will make it clear whether this resource constraint specification
is written from the context of the resource instance, a writing or a reading application
</p>
<p>
<img src="constraint.png"/>
</p>

<%dt Constraint%>


<p>
Notes:
</p>
<ul>
<li>The name of the resource is only used as a logical target for .element.aggregation.reference. which may reference another resource 
  constraint in same resource by this name (#[name]), or a different resource by an absolute uri. In the case of an absolute uri, it 
  must resolve literally or logically to a <a href="profile.htm">Resource Profile</a></li>
<li>The constraint statement has a flat list of elements. The path element provides the overall structure and matches the value in the formal definitions exactly</li>
<li>The condition element must be present if the conformance value is conditional. There is no formal computable grammar for the condition</li>
<li>The type of the element is mostly fixed in the underlying resource definitions, so it can be left out of the constraint specification. 
However when the type is open (resource link to a choice, or a link to any resource, or a choice of data types), then
  this field can be used to pick a narrower set of types</li>
<li>Definition is provided so that the constraint statement can provide a more specific definition for the field in a specific context. 
  For instance, the underlying resource definition might be "Result value", and the more specific resource definition could be "Plasma Cholesterol Test Value".
  The meaning needs to be consistent with the underlying definition, but narrower - a constraint on it. If no definition is provided, the inherited definition
  still applies</li>
<li>There can be more than one definition for each element path. The constraint specification can define multiple different constraints for any element, and 
  then use them in different places. In practice, this is useful for elements in a list, and the differently named constraint profiles are invoked using the 
  <i>values</i> element. The name of the element constraint must be unique within the constraint specification for that resource</li>
<li>For an element with a maximum cardinality of 1, there can only be one entry in the value list, which is either a literal fixed type (with an element name matching the type of the fixed value), or a name,
  which is a reference to a named constraint pattern. If the element has a type of "list", then there can be multiple values - again, either fixed values with a type, or a named constraint. 
  Each of these appears in the list with the order and cardinality specified. By this means, a list may be "unpicked" into a series of different components</li>
<li>The extensions element can be unpicked using this mechanism in order to define the applicable extensions</li>
</ul>

<p>
TODO: Is any control over narrative required?
</p>

  
<h2>Formal Definitions</h2>

<p>The formal definitions for the elements above. Also available as <a href="<%name%>.dict.xml">an XML file</a>.</p>

<%dictionary Constraint%>


<%footer%>

<%/maindiv%>    
</body>
</html>