<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Resource Authoring Methdology - FHIR v<%version%></title>
    <link rel="Stylesheet" href="fhir.css" type="text/css" media="screen" />
</head>

<body>

<%header%>
<%sidebar%>


<%maindiv%>

<h1>FHIR methodology: Developing a resource</h1>

<h2>Introduction</h2>

<p>
This document outlines the steps involved in developing a resource for FHIR. 
It covers both the technical steps required to produce a resource, and the
governance over the process.
</p>

<h2>Creating a Resource</h2>

<p>
The first step is to get approval for the resource. Each resource that exists must first be
approved by the FHIR governance committee (for now, the governance committee is the MnM
project team, but eventually this will be a TSC sub-committee). A proposal to the 
committee must consider the following things:
</p>
<ul>
 <li>Is the resource scope well described?</li>
 <li>What is the scope of the resource? The scope should ideally broad enough to meet the potential needs of a wide spectrum of users (inpatient + community, individual &amp; public health, human &amp; veterinary, all countries &amp; realms).  If covering such a broad spectrum is not possible, the space needs to be segregated such that multiple non-overlapping resources can cover the space</li>
 <li>What other resources will it depend on? What is not in scope for the resource?</li>
 <li>Will other resources are envisaged to depend on it?</li>
 <li>Does the resource overlap with other resources? (i.e. cover the same elements or be associated with the same extensions as)</li>
 <li>What are the target market/implementation focuses for the resource</li>
 <li>What is life cycle of the resource? Does it have a stable id?</li>
 <li>How do the <a href="http.htm">restful transactions</a> match the life cycle of the resource?</li>
 <li>Does the proposed resource have a status field? How does the status field relate to the life cycle?</li>
 <li>What <a href="messaging.htm#Events">message events</a> does this resource need defined, if any?</li>
 <li>Is this resource an order or other intention that could be fulfilled by other resources? Which ones?  What does the fulfillment cycle look like?</li>
 <li>Which committee will be managing this resource?</li>
</ul>
<p>
Generally, the governance committee is looking for stability, for proof that the committee
has thought through the implications of the multiple frameworks that FHIR supports, and to
prevent the same content being modeled in different ways for no good reason. The committee
is also responsible for ongoing QA of resources, and can withdraw permission to publish a non-normative resource, or reassign the ownership of 
a resource.
</p>
<p>
Once approval has been gained, the committee can build the resource definition
</p>
<h2>Tooling Requirements</h2>
<p>
The following tools are required to develop resources for FHIR:
</p>
<ul>
 <li>A Java Runtime Environment 1.7 (to run the build process)</li>
 <li>A .CSV (comma separated spreadsheet) editor to edit the definitions. Excel is used by the core team, but is not required</li>
 <li>Enterprise Architect v 7.6 to edit the UML diagrams</li>
 <li>An XML editor. XMLSpy is recommended, or another schema driven editor is useful, but any XML editor can be used</li>
 <li>A subversion client is required for version control</li>
 <li>For FHIR tooling development, a Java development environment is required</li>
</ul>
<p>
In addition to these tooling prerequisites, to develop a resource, you will need a
subversion username and password, and a resource name.
</p>

<h2>Resource definition</h2>
<p>
To define a resource, 4 different things must be built:
</p>
<ul>
 <li>A spreadsheet that contains the master resource definition</li>
 <li>A UML class diagram that shows the class based definition of the resource</li>
 <li>An HTML fragment that contains additional notes required to explain the resource definition</li>
 <li>An XML example for the resource</li>
 <li>Additional mapping files and/or translation files may also be created, but are not required.</li>
</ul>

<h2>Getting started</h2>
<ol>
 <li>Check out org.hl7.fhir from the subversion repository at https://svn.codespaces.com/healthintersections/fhir/</li>
 <li>In the root directory, execute publish.bat to check that you have the required build environment  - it should report that everything builds successfully (on unix systems [how to run publish process])</li>
 <li>Open /publish/introduction.htm and check that it displays ok</li>
 <li>In the source directory, create a subdirectory with the name of the resource, all in lower case - this is hereafter known as [name]</li>
 <li>Copy the contents of source/templates into this directory, and rename all three files to the same name as the directory (all lower case)</li>
 <li>Add you resource name - in lower case - to the resources section of the publish.ini file in the root directory. Also, add it to the appropriate section in section.htm</li>
 <li>Open the [name].csv file, and edit the contents. In the first column, replace "Template" with the name of the resource (using correct case, hereafter known as [Title])</li>
 <li>Update the template definitions and comments in the other columns appropriately, but do not change the cardinality, conformance, type, or concept domain columns for the existing rows. Then save the file</li>
 <li>Open the [name ].xml file, and replace the 3 occurrences of "Template" with [Title] (the schema doesn't exist yet, so the XML editor might complain about that. Ignore it)</li>
 <li>Open enterprise architect, open the version controlled project file (see instructions - TODO.), check out the "Class Model" Package. </li>
 <li>and copy the Template package, and then paste it as a copy. Now rename the package to [Title], along with any other occurrences of the word "Template". Check in the Class Model package</li>
 <li>Open the diagram, and export it as an image to [name].png in the images subdirectory.</li>
 <li>Execute publish.bat again, and go back to /publish/introduction.htm, and check that your resource appears in the right place.</li>
</ol>
<p>
You are now ready to start developing the actual resource content across the 4 source files. 
Note that you can leave all but the steps 1-3 to the governance committee if you are happy to 
leave drafting resource content until after you have approval for the resource. You cannot 
check in changes to publish.ini/sidebar.htm until approval for the resource has been granted.
</p>

<h2>Development Process</h2>
<p>
The master definitions of the resource are found in the .csv file. This contains a series of
columns that define the content of the resource.
</p>
<table class="grid">
 <tr><td>Element</td><td>The full path of the element (defines the element - see below)</td></tr>
 <tr><td>Card.</td><td>Minimum and maximum Cardinality. Elements that have a max cardinality > 1 should still 
   have a singular name. Note that the usual cardinality combinations are 0..1, 1..1, 0..* and 1..*. Other values 
   for both the lower and upper limit are allowed, but should be based on genuine limits, not arbitrary conformance-type limits.</td></tr>
 <tr><td>Conf.</td><td>Conformance (see <a href="xml.htm#Control">Control Codes</a>). conformance which is tightly tied to the cardinality. Note that an element with a 0..1 cardinality shouldn't be mandatory, while an element with 0..* cardinality may be optional, conditional, or mandatory</td></tr>
 <tr><td>Type</td><td>[Conditional] The type of a data element - may be from the <a href="datatypes.htm">data types</a>, or 
    a <a href="xml.htm#Resource">Resource</a> reference, a <a href="xml.htm#Narrative">Narrative</a> (though this 
    is unusual). <br/><br/>
    A type must be assigned if the element has no children defined, else a type must not be assigned<br/><br/>
    Multiple types can be indicated, seperated by a "|". If more than one type is listed, the 
    element name must terminate with "[x]". If the type is Resource, one or more resource types must be listed as a parameter, or "Any" for any kind of resource.
    </td></tr>
 <tr><td>Concept Domain</td><td>[Conditional] For types of code, Coding, or CodeableConcept, a concept domain must be defined. Concept domains may be bound as part of the FHIR specification - see below</td></tr>
 <tr><td>Must Understand</td><td>[Optional] Whether a receiving application must understand the element (note that must understand 
     isn't quite the same as must support - if an application understands the element by insisting on one fixed value, this is acceptable)</td></tr>
 <tr><td>Short Name</td><td>The definition used for the resource in the XML definitions - limited in length by the available space in the definitions</td></tr>
 <tr><td>Definition</td><td>Formal definition for the meaning of the element. This must follow definition good practices – See below.</td></tr>
 <tr><td>Requirements</td><td>[Optional] Underlying requirements that this element is defined to meet</td></tr>
 <tr><td>Comments</td><td>[Optional] Additional user focused comments - clarifications, explanation of how to use the element, notes on how not to use it.</td></tr>
 <tr><td>Condition</td><td>[Conditional] if the conformance code is "Conditional", this specifies what the condition is</td></tr>
 <tr><td>RIM Mapping</td><td>RIM mapping for the element. See below</td></tr>
 <tr><td>v2 Mapping</td><td>[Optional] where this element comes from in v2 messages. Multiple mappings may be provided</td></tr>
 <tr><td>To Do</td><td>[Optional] Committee notes to implementers about future things that are planned (published)</td></tr>
 <tr><td>Committee Notes</td><td>[Optional] Private committee notes - not published</td></tr>
</table>
<p>
The most important column is the first one, which defines the structure of the resource.
The first row of the first column defines the formal title of the resource used throughout
the FHIR build process. Every row from then on must start with [Title]. The second row
is always [Title].id, which is the master identifier of the resource that never changes.
From there on, the values of the rows take the form of [Title].x.y where the dotted
notation indicates structural containment. For instance, [Title].id is the id element in the
resource [Title], and [Title].section.name is a name element inside the section element
of the [Title] resource element. A path can never be used without defining it first. So
[Title].element.name can only be used after [Title].element. The last two elements in a
resource are always [Title].extensions and [Title].text, as defined in the template.
</p>
<p>
Names used for resource elements must follow the following rules and guidelines:
</p>
<ol>
 <li>use lowerCamelCase</li>
 <li>U.S. English (spelled correctly!)</li>
 <li>Expressed as a noun, with a preceding adjective where necessary to clarify the semantics</li>
 <li>Use the “most broadly recognized” industry term for the object that is unlikely to be mistaken for a different element.</li>
 <li>Use abbreviations only where extremely well understood by the entire target market. Only the first letter of an abbreviation should be uppercase</li>
 <li>Use different names for different elements within the hierarchy unless the semantic is the same in different context.  (E.g. using “.name” for “sponsor.name” and “contact.name” is ok if the meaning of “name” is consistent for both sponsor and name.)</li>
 <li>Be concise (differentiation of semantics through the name is only necessary with other elements in the resource.  Full semantic description is in the definitions.)</li>
</ol>
<p>
Elements should be ordered roughly in terms of importance, with related concepts grouped together.
</p>
<p>
The base spreadsheet only has columns for mapping to the RIM and v2. Many other mappings
can be done, but will be found in other spreadsheets (details to be provided).
</p>
<h2>Concept Domains</h2>
<p>
In all but a few rare circumstances, elements with a data type of code, coding, and
codeableConcept should have a concept domain assigned. This provides a hook for the
terminology methodology and implementation tools. Any concept domain defined must be entered in /terminologies/concept-
domains.csv, along with a definition and binding information. The binding information
should be filled out according to this table:
</p>
<table class="grid">
  <tr><td>Concept Domain</td><td>The name of the concept domain as used in the resource definitions</td></tr>
  <tr><td>Definition</td><td>A formal definition for the concept domain, following good definition practices.  See below</td></tr>
  <tr><td>Binding Type &amp; Binding</td><td>The type of binding defined in FHIR. Possible values:
        <ul>
	  <li>Unbound - FHIR proposes no binding. The binding column is empty</li>
	  <li>Reference - FHIR proposes no binding, but the binding column contains a reference to a value set or a coding system that has the right kind of concepts in it</li>
	  <li>Suggestion - FHIR proposes no binding, but the binding column contains a reference to a value set or a coding system that is a good candidate for use</li>
	  <li>Preferred - The concept domain is bound to the value set or code system defined in the binding column, but other codes can be used if no applicable codes are available (i.e. CWE binding)</li>
	  <li>Code List - the concept domain is bound to a limited list of codes. The codes can be privately defined if the data type is code, or 
	  a mix of privately defined and externally defined (i.e. SNOMED-CT codes) for Coding and CodeableConcept. the binding column contains the proper name of the code list. This name becomes part of the SID for the 
codes - if it matters (not an element of type "code"), and the name is also the name of an excel spreadsheet that defines the codes</li>
	  <li>Special - the concept domain is bound to a set of codes defined implicitly in FHIR. The following binding values are possible: "DataType", "MessageEvent", or "ResourceType"</li>
	  <li>External - the concept domain is bound to a a set of codes defined elsewhere. The binding column contains the name of the external source, and the binding details contains a URL reference for it.</li>
	</ul>
      </td></tr>
</table>
<h3>RIM mappings</h3>
<p>
Todo: methdology + grammar
</p>
<h2>
Design Considerations
</h2>
<p>
A core tenant of FHIR is that resources should be simple, stable, and easy to use. Generally, 
the following guidelines apply to defining resources:
</p>
<ul>
  <li>Define the resource scope, and target market clearly</li>
  <li>Resources are subject to ballot. All of FHIR is balloted as a single pack (a la v2). A difference analysis will be available to help with the ballot cycle</li>
  <li>When designing resources, pre-existing designs that should be consulted are:
      <ul>
        <li>v3 Domain models</li>
        <li>CDA, Consolidated CDA story and other implementation guides (and IHE specifications)</li>
        <li>v2 segments</li>
        <li>openEHR Archetypes on http://www.openher.org/ckm</li>
	<li>National repository definitions (possible sources: S&amp;I (including the CEDD), UK NHS, Canada Health Infoway, Singapore LIMs, NEHTA (Australia)) - beware of local variations</li>
      </ul>
  </li>
  <li>Conciseness is a Primary virtue. Every word must count, since everyone has to read it.</li>
  <li>The element definitions include a requirements slot. This is not mandatory, and can be hard work, but can also be used to make the 
     resource more maintainable. Note that in FHIR, negative ballot comments can't be ruled out of scope 
     if they challenge a missing or unclear requirements.</li>
  <li>All elements and extensions defined by HL7 committees must have a genuine RIM mapping.</li>
  <li>Structural re-arrangements to the resources are very difficult if not impossible (including cardinality - see below). Path based navigation must not be changed (=broken)).  Therefore, considerable thought should go into data structure.  Specific considerations are listed below</li>
  <li>Event data that goes in the resource: enduring semantically significant event metadata i.e. pathologist approving lab report, prescriber of medication - need to be maintained in band with the data, not somewhere else</li>
  <li>todo : status, request/fulfillment (there will be other "pointer" resources for request/fulfillment, +  pattern for event history on resources that have events (and usually status)</li>
</ul>
<p>
A key part of the design process is that the resources should the define
the data elements that everyone needs, and leave the rest of the data elements to extensions - the committee can define
and publish extensions. The point of committees defining extensions is that uncommonly encountered use cases can be kept in extensions,
and all implementers are not forced to deal with them (this is a big part of the perceived implementation difficulty associated with
HL7 standards). Therefore one significant part of the process of building a resource is deciding what elements to put in the resource, 
and what to put in extensions. Data elements are candidates for being in the base resource if:
</p>
<ul>
  <li>They are not specific to only one or two countries.</li>
  <li>If the data elements are in the 80%: i.e. something that 80% of implementers will encounter and/or need - not 80% of the cases that occur to all implementers (this is about preventing work flow variations from complicating the model)</li>
  <li>Any implementer must understand the content in order to understand the core problem (i.e. can't be ignored)</li>
  <li>If modeled in all other relevant specifications (particularly, v2, v3, openEHR)</li>
</ul>
<p>
Extensions are a legitimate way for committees to define content. While committees should not 
define extensions that must be understood, there is no reason for committees not to define 
extensions. Note that in FHIR, ballot comments that something is in an extension and not a model 
can be ruled out of scope or non-persuasive if substantial evidence is not provided that the above criteria are met. Committees may subsequently elevate extensions 
to full resource content (implementation implications of this are discussed in the standard).  It is expected that most, if not all, useful implementation profiles 
will include the use of extensions.
</p>
<h3>Cardinality</h3>
<p>
Changing cardinality is significant to implementers. The following guidelines apply:
</p>
<ul>
 <li>If an element has multiple cardinality in some use cases, or there is a prospect it might be made multiple cardinality in the future, and when there is no clear differentiation of the primary case, make it multiple cardinality now</li>
 <li>v3 has many cardinality changes in cascading models. in FHIR, most cardinality changes occur in conformance statements and don't change the resource</li>
 <li>if making something multiple cardinality after it wasn't, introduce a new element, define the original as part of the list in the definitions, and clearly describe how the primary is differentiated.</li>
</ul>
<h3>
Definitions
</h3>
<p>
todo: put something here from vocabulary.  Specifically, we’re looking for: short, non-tautological using broadly 
understood terms, with examples (usually 3-4, unless it’s bound or something simple like a date).  
Definitions must clearly distinguish an element from other elements, including extension elements.
</p>
<h3>
Choosing a data type
</h3>
<p>
The following table defines the data types available, and provides some notes concerning their use.
</p>
<table class="lines">
  <tr><th>Type</th><th>Description</th><th>Usage</th></tr>
  <tr><td colspan="3"><hr/></td></tr>
  <tr><td>string </td><td>A simple string (=v3 ST)</td><td>Should be known to be short, and no prospect of containing paragraphs or structure or formatting </td></tr>
  <tr><td>Narrative </td><td>xhtml structure </td><td>Don't use except where it appears in all resources </td></tr>
  <tr><td>Attachment </td><td>Multimedia Attachment (=v3 ED)</td><td>For complex narrative that may have paragraphs, structure, or formatting, or not be text based at all (image, video etc)</td></tr>
  <tr><td colspan="3"><hr/></td></tr>
  <tr><td>code </td><td>A simple code (~v3 CS) </td><td>Simple code where the list is defined by the FHIR infrastructure, the resource definition, or by some fixed external reference (usually ISO or W3C) </td></tr>
  <tr><td>Coding </td><td>A defined code (~v3 CV) </td><td>A direct reference to a concept in a terminology. Use where the content model is managing the issue of text equivalence, and translations across multiple fields directly </td></tr>
  <tr><td>CodeableConcept </td><td>A full concept (~v3 CD)</td><td>Use for a simple equivalent of CD/CE </td></tr>
  <tr><td>Choice </td><td>A choice from a questionnare</td><td>a code from a code/description list, where there is no formal terminology underlying the list</td></tr>
  <tr><td colspan="3"><hr/></td></tr>
  <tr><td>dateTime</td><td>a fixed instant(=v3 TS)</td><td>System times, always known to the second</td></tr>
  <tr><td>humanDate</td><td>a date with variable precision(=v3 TS)</td><td>Year, Year + month, Year + month + date, or a dateTime - use for any dates taht might come from humans</td></tr>
  <tr><td>Schedule </td><td>A set of times (~v3 GTS) </td><td>For specifying a schedule (a tamed GTS)</td></tr>
  <tr><td colspan="3"><hr/></td></tr>
  <tr><td>integer </td><td>A simple integer (=v3 INT)</td><td>only a simple integer - for structural values only (like query result count)</td></tr>
  <tr><td>Quantity </td><td>A measured/measurable amount (~v3 PQ/CO/MO/IVL)</td><td>Use where there is a value with human units, that may be coded. It may be possible to use a more specific variant: </td></tr>
  <tr><td>Duration </td><td>An amount of time (~v3 PQ)</td><td>Fixes to units of time coded in UCUM</td></tr>
  <tr><td>Count </td><td>A simple count (~v3 PQ/INT)</td><td>Fixes the quantity to a simple count of whole numbers </td></tr>
  <tr><td>Money </td><td>A currency amount (~v3 MO)</td><td>Fixes units to a currency </td></tr>
  <tr><td colspan="3"><hr/></td></tr>
  <tr><td>Interval() </td><td>An interval (=v3 IVL/URG) </td><td>A range (low + high). If an element can be either a fixed interval or a duration, allow both types. Usual types parameters can be Quantity or humanDate, but integer, decimal, and dateTime can also be used</td></tr>
  <tr><td>Ratio</td><td>numerator/denominator (=v3 RTO)</td><td>Same usage as v3 ratio. Usually just used as a choice of possible data type on observations</td></tr>
  <tr><td colspan="3"><hr/></td></tr>
  <tr><td>uri </td><td>A uri (~v3 URL) </td><td>A uri. (urn or URL). Usually used in the data types, not in resources</td></tr>
  <tr><td>id </td><td>A simple id </td><td>This is not properly scoped. It's used where the scope implicitly implies the meaning - resource ids, or internal references. No use in general resource content</td></tr>
  <tr><td>Identifier </td><td>A known identifier (~v3 II) </td><td>An identifier. Same scope as II </td></tr>
  <tr><td>HumanId </td><td>A human assigned identifier (see v3 identifier pattern) (=v2 CX) </td><td>In addition to the actual Id, has a type, a period, and an assigner. Use for human assigned identifiers </td></tr>
  <tr><td>Resource() </td><td>A reference to another resource </td><td>You can specify one or more resource types in the parameter (or "Any") </td></tr>
  <tr><td colspan="3"><hr/></td></tr>
  <tr><td>HumanName </td><td>A human assigned name (=v3 EN) </td><td>use as for v3 EN / v2 XPN / XON </td></tr>
  <tr><td>Address </td><td>A postal address (=v3 AD) </td><td>Use as for v3 AD / v2 XAD</td></tr>
  <tr><td>Contact </td><td>Contact details (=v3 TEL) </td><td>Use as for v3 TEL / v2 XTN </td></tr>
</table>
<p>
In addition to these data types, there's a few other legal data types that are not expected to be used anywhere in a resource.
</p>
<h2>
Notes
</h2>
<p>
The information defined in the .csv file will all appear in the specification but are all specific to an element, 
and some are only published in the formal definitions. 
To help the user with implementation, a set of concise additional notes is found under each resource
definition. These notes may discuss how to use a resource, why it doesn't contain things,
the relationship between fields, etc. these notes are defined by editing [name].htm
</p>
<p>
In addition, [name].htm contains further usage notes, and any custom transactions that must
defined for the resource.
</p>
<h2>Example</h2>
<p>
The final part of building a resource is to hand edit an example. The data in the example
should illustrate aspects of building and using the resource and is a useful way of double
checking the resource definitions. Ideally it should be appropriate from a business/clinical perspective.  However, fully exercising the resource is more important.
</p>

<h2>Message Events</h2>
<p>
Resources may also have specific message events defined for them. For now, this is done
in source/messaging.htm.
</p>

<h2>Known To Do for this guide</h2>
<ul>
 <li>Need a section on how to author extensions, as that will need to happen as part of development.  Hints on what sorts of extensions should be created – e.g. commonly used v2 elements, v3 elements, etc.</li>
 <li>Need a section providing guidance on how to structure resources, particularly approaches that will simplify future growth and ability to attach extensions.</li>
 <li>Need guidance on when selection of a vocabulary is appropriate.</li>
</ul>

<%footer%>
</body>
</html>