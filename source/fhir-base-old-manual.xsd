<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml" targetNamespace="http://www.hl7.org/fhir" elementFormDefault="qualified">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace"/>
  <xs:import namespace="http://www.w3.org/1999/xhtml" schemaLocation="xhtml.xsd"/>
  <!-- 
  Infrastructure
-->
  <xs:simpleType name="DataAbsentReason">
    <xs:restriction base="xs:string">
      <!--%enum DataAbsentReason%-->
      <xs:enumeration value="unknown">
        <xs:annotation>
          <xs:documentation>The value is not known</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="asked">
        <xs:annotation>
          <xs:documentation>The source human does not know the value</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="temp">
        <xs:annotation>
          <xs:documentation>There is reason to expect (from the workflow) that the value may become known</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="notasked">
        <xs:annotation>
          <xs:documentation>The workflow didn't lead to this value being known</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="masked">
        <xs:annotation>
          <xs:documentation>The information is not avialable due to security, privacy or related reasons</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="unsupported">
        <xs:annotation>
          <xs:documentation>The source system wasn't capable of supporting this element</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="astext">
        <xs:annotation>
          <xs:documentation>The content of the data is represented as text </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="error">
        <xs:annotation>
          <xs:documentation>Some system or workflow process error means that the information is not available</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:attributeGroup name="dataAbsentReason">
    <xs:attribute name="dataAbsentReason" type="DataAbsentReason">
      <xs:annotation>
        <xs:documentation>Specifies why the normally expected content of the data element is missing</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="NarrativeStatus">
    <xs:restriction base="xs:string">
      <xs:enumeration value="generated">
        <xs:annotation>
          <xs:documentation>The contents of the narrative are entirely generated from the structured data in the resource</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="extensions">
        <xs:annotation>
          <xs:documentation>The contents of the narrative are entirely generated from the structured data in the resource, and some of the structured data is contained in extensions</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="additional">
        <xs:annotation>
          <xs:documentation>The contents of the narrative contain additional information not found in the structured data</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Narrative">
    <xs:sequence>
      <xs:element name="status" type="NarrativeStatus">
        <xs:annotation>
          <xs:documentation>The relationship between the narrative and the data</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="xhtml:xhtml">
        <xs:annotation>
          <xs:documentation>The narrative as xhtml</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="image" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>images used in the xhtml</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="map" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>a map between the narrative and the data</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Extensions">
    <xs:sequence>
      <xs:element name="extension" type="Extension" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>An extension value</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Extension">
    <xs:sequence>
      <xs:element name="code" type="id" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>The code that identifies the meaning of the extension by reference to the definitions</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="definition" type="uri" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Source of the definition for the code - a namespace or a URL</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ref" type="id" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Internal reference to context of the extension - a pointer to an xml:id in the same resource</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="state" type="ExtensionState" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>The state or the extension - whether readers must must understand, or whether it's superceded by being defined in the resource</xs:documentation>
        </xs:annotation>
      </xs:element>
     <xs:choice>
        <xs:annotation>
          <xs:documentation>Value of extension - any of the types defined in the data types</xs:documentation>
        </xs:annotation>
        <xs:element name="valueDateTime" type="dateTime"/>
        <xs:element name="valueDate" type="date"/>
        <xs:element name="valueInstant" type="instant"/>
        <xs:element name="valueString" type="string"/>
        <xs:element name="valueUri" type="uri"/>
        <xs:element name="valueAttachment" type="Attachment"/>
        <xs:element name="valueCodeableConcept" type="CodeableConcept"/>
        <xs:element name="valueCoding" type="Coding"/>
        <xs:element name="valueIdentifier" type="Identifier"/>
        <xs:element name="valueQuantity" type="Quantity"/>
        <xs:element name="valueChoice" type="Choice"/>
        <xs:element name="valueInterval_Quantity" type="Interval_Quantity"/>
        <xs:element name="valueInterval_DateTime" type="Interval_DateTime"/>
        <xs:element name="valueInterval_Date" type="Interval_Date"/>
        <xs:element name="valueRatio" type="Ratio"/>
        <xs:element name="valueHumanId" type="HumanId"/>
        <xs:element name="valueHumanName" type="HumanName"/>
        <xs:element name="valueAddress" type="Address"/>
        <xs:element name="valueContact" type="Contact"/>
        <xs:element name="valueSchedule" type="Schedule"/>
        <xs:element name="valueExtension" type="Extension"/>
      </xs:choice>
      <xs:element name="extensions" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="extension" type="Extension" minOccurs="0" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>Nested Extensions - further extensions that are part of the extension</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="ExtensionState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="must-understand">
        <xs:annotation>
          <xs:documentation>The extension contains information that qualifies or negates another element, and must be understood by an application process the resource</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="superceded">
        <xs:annotation>
          <xs:documentation>The extension has been promoted into the main content of the resource, and the content is found at the reference. The extension continues to be defined for backward compatibility</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResourceType">
    <xs:restriction base="xs:string">
      <!--%enum resource%-->
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="CoreResourceReference" block="extension">
    <xs:sequence>
      <xs:element name="type" type="ResourceType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>the mime type of the content</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="id" type="id-simple" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Id of the reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="version" type="id-simple" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Version specific Id of the reference</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="text" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Text summary for the reference</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResourceReference">
    <xs:complexContent>
      <xs:extension base="CoreResourceReference">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- ==============================
    Primitive Types
  -->
  <xs:complexType name="boolean">
    <xs:simpleContent>
      <xs:extension base="xs:boolean">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="integer">
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="decimal">
    <xs:simpleContent>
      <xs:extension base="xs:decimal">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="instant">
    <xs:simpleContent>
      <xs:extension base="xs:dateTime">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="base64Binary">
    <xs:simpleContent>
      <xs:extension base="xs:base64Binary">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="string">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="uri">
    <xs:simpleContent>
      <xs:extension base="xs:anyURI">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!-- ==============================
  String Patterns
    ============================== -->
  <!-- code : a string which has at least one character and no whitespace -->
  <xs:simpleType name="code-simple">
    <xs:restriction base="xs:normalizedString">
      <xs:pattern value="\S|\S.*\S"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="code">
    <xs:simpleContent>
      <xs:extension base="code-simple">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!-- oid : An ISO oid [ref ISO std] -->
  <xs:simpleType name="oid-simple">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-2].[0-9]{1,3}(\.[0-9]{1,3})*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="oid">
    <xs:simpleContent>
      <xs:extension base="oid-simple">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!-- uuid : A UUID [ref DEC std]. Sometimes called a GUID. Always represented in lowercase -->
  <xs:simpleType name="uuid-simple">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="uuid">
    <xs:simpleContent>
      <xs:extension base="uuid-simple">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!-- sid : A system id, which is a uri taken from the list of known definition systems -->
  <xs:simpleType name="sid-simple">
    <xs:restriction base="xs:anyURI">
      <!-- this is not an enumeration, and cannot be checked in schema -->
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="sid">
    <xs:simpleContent>
      <xs:extension base="sid-simple">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!-- id	: A whole number in the range 0 to 2^64-1, optionally represented in hex, a uuid, an oid, or any other combination of letters, numerals, "-" and "." -->
  <xs:simpleType name="id-simple">
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9a-zA-Z\-\.]+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="id">
    <xs:simpleContent>
      <xs:extension base="id-simple">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!-- dateTime: A date, date-time or partial date (e.g. just year or year + month). Generally, there is no timezone, though one may be populated if hours and minutes are specified. Seconds may be provided but may also be ignored. -->
  <xs:simpleType name="dateTime-simple">
    <xs:union memberTypes="xs:gYear xs:gYearMonth xs:date xs:dateTime"/>
  </xs:simpleType>
  <xs:complexType name="dateTime">
    <xs:simpleContent>
      <xs:extension base="dateTime-simple">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!-- humanDate: A date, time, date-time or partial date (e.g. just year or year + month). Generally, there is no timezone, though one may be populated if hours and minutes are specified. Seconds may be provided but may also be ignored. -->
  <xs:simpleType name="date-simple">
    <xs:union memberTypes="xs:gYear xs:gYearMonth xs:date"/>
  </xs:simpleType>
  <xs:complexType name="date">
    <xs:simpleContent>
      <xs:extension base="date-simple">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!-- ==============================
  Types
    ============================== -->
  <!-- Attachment -->
  <xs:complexType name="Attachment">
    <xs:sequence>
      <xs:element name="mimeType" type="code">
        <xs:annotation>
          <xs:documentation>the mime type of the content</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="data" type="xs:base64Binary" minOccurs="0">
        <xs:annotation>
          <xs:documentation>data inline, base64ed</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="url" type="xs:anyURI" minOccurs="0">
        <xs:annotation>
          <xs:documentation>url where the data can be found</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="hash" type="xs:base64Binary" minOccurs="0">
        <xs:annotation>
          <xs:documentation>base64 sha-256 hash of the data</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="lang" type="code" minOccurs="0">
        <xs:annotation>
          <xs:documentation>ISO 6133 language code</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="title" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>A name to display in place of the data</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <!-- Identifier -->
  <xs:complexType name="CoreIdentifier">
    <xs:sequence>
      <xs:element name="system" type="xs:anyURI" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Identity of the system that owns the id</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="id" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>the value of the identifier</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Identifier">
    <xs:complexContent>
      <xs:extension base="CoreIdentifier">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- Coding -->
  <xs:complexType name="CoreCoding">
    <xs:sequence>
      <xs:element name="code" type="code" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Symbol in syntax defined by the system</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="system" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>Identity of the system that owns the id</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="displayName" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Representation defined by the system</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Coding">
    <xs:complexContent>
      <xs:extension base="CoreCoding">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- CodeableConcept -->
  <xs:complexType name="CoreCodeableConcept">
    <xs:sequence>
      <xs:element name="coding" type="Coding" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>one more "codings" that all represent a single notional concept</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="text" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>A plain text representation of the concept</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="primary" type="xs:ID" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Which code was chosen directly by the user</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CodeableConcept">
    <xs:complexContent>
      <xs:extension base="CoreCodeableConcept">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- Choice -->
  <xs:complexType name="Choice">
    <xs:sequence>
      <xs:element name="code" type="code" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Selected code</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="values">
        <xs:annotation>
          <xs:documentation>A list of possible values for the code</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="value" type="ChoiceValue" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="isOrdered" type="xs:boolean" minOccurs="0">
        <xs:annotation>
          <xs:documentation>If the order of the values has an assigned meaning</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <xs:complexType name="ChoiceValue">
    <xs:sequence>
      <xs:element name="code" type="code">
        <xs:annotation>
          <xs:documentation>Possible code</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="display" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Display for the code</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="QuantityStatus">
    <xs:restriction base="xs:string">
      <xs:enumeration value="&lt;">
        <xs:annotation>
          <xs:documentation>The actual value is less than the given value</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="&lt;=">
        <xs:annotation>
          <xs:documentation>The actual value is less than or equal to the given value</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="&gt;=">
        <xs:annotation>
          <xs:documentation>The actual value is greater than or equal to the given value</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="&gt;">
        <xs:annotation>
          <xs:documentation>The actual value is greater than the given value</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="CoreQuantity">
    <xs:sequence>
      <xs:element name="value" type="xs:decimal" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Numerical value (with implicit precision)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="status" type="QuantityStatus" minOccurs="0">
        <xs:annotation>
          <xs:documentation>indicates how the value should be understood and represented. If no status is specified, the value is a point value</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="units" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>unit representation</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="code" type="code" minOccurs="0">
        <xs:annotation>
          <xs:documentation>A coded form of the unit</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="system" type="xs:anyURI" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The system the defines the coded form</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Quantity">
    <xs:complexContent>
      <xs:extension base="CoreQuantity">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <!-- Quantity Restrictions -->
  <!-- Duration : The unit must be an amount of time, and a UCUM unit must be provided. -->
  <xs:complexType name="Duration">
    <xs:complexContent>
      <xs:restriction base="Quantity">
        <xs:sequence>
          <xs:element name="value" type="xs:decimal" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Numerical value (with implicit precision)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="status" type="QuantityStatus" minOccurs="0">
            <xs:annotation>
              <xs:documentation>indicates how the value should be understood and represented. If no status is specified, the value is a point value</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="units" type="xs:string" minOccurs="0">
            <xs:annotation>
              <xs:documentation>unit representation</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="code" type="code">
            <xs:annotation>
              <xs:documentation>UCUM code</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="system" type="xs:anyURI" fixed="urn:hl7-org:sid/ucum">
            <xs:annotation>
              <xs:documentation>UCUM</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="CoreDuration">
    <xs:complexContent>
      <xs:restriction base="CoreQuantity">
        <xs:sequence>
          <xs:element name="value" type="xs:decimal" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Numerical value (with implicit precision)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="status" type="QuantityStatus" minOccurs="0">
            <xs:annotation>
              <xs:documentation>indicates how the value should be understood and represented. If no status is specified, the value is a point value</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="units" type="xs:string" minOccurs="0">
            <xs:annotation>
              <xs:documentation>unit representation</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="code" type="code">
            <xs:annotation>
              <xs:documentation>UCUM code</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="system" type="xs:anyURI" fixed="urn:hl7-org:sid/ucum">
            <xs:annotation>
              <xs:documentation>UCUM</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!-- Distance 	The unit must be an amount of length, and a UCUM unit must be provided. -->
  <xs:complexType name="Distance">
    <xs:complexContent>
      <xs:restriction base="Quantity">
        <xs:sequence>
          <xs:element name="value" type="xs:decimal" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Numerical value (with implicit precision)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="status" type="QuantityStatus" minOccurs="0">
            <xs:annotation>
              <xs:documentation>indicates how the value should be understood and represented. If no status is specified, the value is a point value</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="units" type="xs:string" minOccurs="0">
            <xs:annotation>
              <xs:documentation>unit representation</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="code" type="code">
            <xs:annotation>
              <xs:documentation>UCUM Code</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="system" type="xs:anyURI" fixed="urn:hl7-org:sid/ucum">
            <xs:annotation>
              <xs:documentation>UCUM</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!-- Count : The the value must a whole number, and the UCUM unit must be "1" -->
  <xs:complexType name="Count">
    <xs:complexContent>
      <xs:restriction base="Quantity">
        <xs:sequence>
          <xs:element name="value" type="xs:decimal" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Numerical value (with implicit precision)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="status" type="QuantityStatus" minOccurs="0">
            <xs:annotation>
              <xs:documentation>indicates how the value should be understood and represented. If no status is specified, the value is a point value</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="units" type="xs:string" minOccurs="0">
            <xs:annotation>
              <xs:documentation>unit representation</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="code" type="code" fixed="1">
            <xs:annotation>
              <xs:documentation>UCUM unit "1" - countable units</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="system" type="xs:anyURI" fixed="urn:hl7-org:sid/ucum">
            <xs:annotation>
              <xs:documentation>UCUM</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!-- Money : The unit must be a currency, and the code must from ISO 639 -->
  <xs:complexType name="Money">
    <xs:complexContent>
      <xs:restriction base="Quantity">
        <xs:sequence>
          <xs:element name="value" type="xs:decimal" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Numerical value (with implicit precision)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="status" type="QuantityStatus" minOccurs="0">
            <xs:annotation>
              <xs:documentation>indicates how the value should be understood and represented. If no status is specified, the value is a point value</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="units" type="xs:string" minOccurs="0">
            <xs:annotation>
              <xs:documentation>unit representation</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="code" type="code" fixed="1">
            <xs:annotation>
              <xs:documentation>currency code from ISO 639</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="system" type="xs:anyURI" fixed="urn:hl7-org:sid/iso/639">
            <xs:annotation>
              <xs:documentation>ISO 639</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <!-- pattern for Interval
  <xs:complexType name="Interval_[param]">
    <xs:complexContent>
      <xs:sequence>
        <xs:element name="low" type="[param]" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>The low boundary of the interval</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="high" type="[param]" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>The high boundary of the interval</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attributeGroup ref="dataAbsentReason"/>
      <xs:attribute ref="xml:id"/>
    </xs:complexContent>
  </xs:complexType>  
  -->
  <xs:complexType name="Interval_Quantity">
    <xs:sequence>
      <xs:element name="low" type="Quantity" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The low boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="high" type="Quantity" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The high boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <xs:complexType name="Interval_integer">
    <xs:sequence>
      <xs:element name="low" type="integer" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The low boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="high" type="integer" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The high boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <xs:complexType name="Interval_decimal">
    <xs:sequence>
      <xs:element name="low" type="decimal" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The low boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="high" type="decimal" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The high boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <xs:complexType name="Interval_dateTime">
    <xs:sequence>
      <xs:element name="low" type="dateTime" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The low boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="high" type="dateTime" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The high boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <xs:complexType name="CoreInterval_humanDate">
    <xs:sequence>
      <xs:element name="low" type="humanDate" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The low boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="high" type="humanDate" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The high boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Interval_humanDate">
    <xs:complexContent>
      <xs:extension base="CoreInterval_humanDate">
        <xs:attributeGroup ref="dataAbsentReason"/>
        <xs:attribute ref="xml:id"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Ratio">
    <xs:sequence>
      <xs:element name="numerator" type="Quantity" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The low boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="denominator" type="Quantity" minOccurs="0">
        <xs:annotation>
          <xs:documentation>The high boundary of the interval</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <!-- ==============================
  Structures
   ============================== -->
  <xs:complexType name="HumanId">
    <xs:sequence>
      <xs:element name="type" type="Coding" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Code for identifier type</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="identifier" type="CoreIdentifier" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Actual identifier</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="assigner" type="CoreResourceReference" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Organisation that manages the identifier</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="period" type="CoreInterval_humanDate" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Time period during which identifier was valid for use</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <xs:simpleType name="HumanNameUse">
    <xs:restriction base="xs:string">
      <xs:enumeration value="usual">
        <xs:annotation>
          <xs:documentation>Known as/conventional/the one you normally use</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="official">
        <xs:annotation>
          <xs:documentation>The formal name as registered in an official (government) registry, but which name might not be commonly used. May be called "legal name".</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="temp">
        <xs:annotation>
          <xs:documentation>A temporary name. A name valid time can provide more detailed information. This may also be used for temporary names assigned at birth or in emergency situations. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="anonymous">
        <xs:annotation>
          <xs:documentation>Anonymous assigned name, alias, or pseudonym (used to protect a person's identity for privacy reasons)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="old">
        <xs:annotation>
          <xs:documentation>This name is no longer in use (or was never correct, but retained for records)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="maiden">
        <xs:annotation>
          <xs:documentation>A name used prior to marriage. Marriage naming customs vary greatly around the world. This name use is for use by applications that collect and store "maiden" names. Though the concept of maiden name is often gender specific, the use of this term is not gender specific. The use of this term does not imply any particular history for a person's name, nor should the maiden name be determined algorithmically</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="NamePartType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="family">
        <xs:annotation>
          <xs:documentation>Family name, this is the name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="given">
        <xs:annotation>
          <xs:documentation>Given name. NOTE Not to be called "first name" since given names do not always come first. .</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="title">
        <xs:annotation>
          <xs:documentation>Part of the name that is acquired as a title due to academic, legal, employment or nobility status etc. NOTE Title name parts include name parts that come after the name, such as qualifications. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="HumanName">
    <xs:sequence>
      <xs:element name="use" type="HumanNameUse" minOccurs="0">
        <xs:annotation>
          <xs:documentation>codes for use of this name</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="text" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Text representation of the name</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="part" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>A part of the name</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="type" type="NamePartType" minOccurs="0">
              <xs:annotation>
                <xs:documentation>Type of name part</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="value" type="xs:string" minOccurs="0">
              <xs:annotation>
                <xs:documentation>Text representation of the name</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="period" type="Interval_humanDate" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Time period during which name was/is in use</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <xs:simpleType name="AddressUse">
    <xs:restriction base="xs:string">
      <xs:enumeration value="home">
        <xs:annotation>
          <xs:documentation>A communication address at a home. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="work">
        <xs:annotation>
          <xs:documentation>An office address.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="temp">
        <xs:annotation>
          <xs:documentation>A temporary address. The period can provide more detailed information. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="old">
        <xs:annotation>
          <xs:documentation>This address is no longer in use (or was never correct, but retained for records)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AddressPartType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="part">
        <xs:annotation>
          <xs:documentation>Part of an address line (typically used with an extension that further defines the meaning of the part). </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="line">
        <xs:annotation>
          <xs:documentation>A line of an address (typically used for street names &amp; numbers, unit details, delivery hints etc)  .</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="city">
        <xs:annotation>
          <xs:documentation>The name of the city, town, village, or other community or delivery centre. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="state">
        <xs:annotation>
          <xs:documentation>sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes). </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="country">
        <xs:annotation>
          <xs:documentation>Country. ISO 3166 3 letter codes can be used in place of a full country name. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="zip">
        <xs:annotation>
          <xs:documentation>A postal code designating a region defined by the postal service. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="dpid">
        <xs:annotation>
          <xs:documentation>A value that uniquely identifies the postal address. (often used in barcodes). </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Address">
    <xs:sequence>
      <xs:element name="use" type="AddressUse" minOccurs="0">
        <xs:annotation>
          <xs:documentation>code for use of this address</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="text" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Text representation of the address</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="part" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>A part of the address</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="type" type="AddressPartType" minOccurs="0">
              <xs:annotation>
                <xs:documentation>Type of address part</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="value" type="xs:string" minOccurs="0">
              <xs:annotation>
                <xs:documentation>Text representation of the address</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="period" type="CoreInterval_humanDate" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Time period during which address was/is in use for this purpose</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attributeGroup ref="dataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
  </xs:complexType>
  <xs:simpleType name="ContactSystem">
    <xs:restriction base="xs:string">
      <xs:enumeration value="phone">
        <xs:annotation>
          <xs:documentation>the value is a telephone number used for voice calls. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="fax">
        <xs:annotation>
          <xs:documentation>the value is a fax machine. Use of full international numbers starting with + is recommended to enable automatic dialing support but not required.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="email">
        <xs:annotation>
          <xs:documentation>the value is an email address</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="url">
        <xs:annotation>
          <xs:documentation>The value is a url. This is intended for various personal contacts including blogs, twitter, facebook etc. Do not use for email addresses</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="other">
        <xs:annotation>
          <xs:documentation>the value is something else. An extension may provide additional information</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ContactUse">
    <xs:restriction base="xs:string">
      <xs:enumeration value="home">
        <xs:annotation>
          <xs:documentation>A communication contact at a home; attempted contacts for business purposes might intrude privacy and chances are one will contact family or other household members instead of the person one wishes to call. Typically used with urgent cases, or if no other contacts are available.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="work">
        <xs:annotation>
          <xs:documentation>An office contact. First choice for business related contacts during business hours.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="temp">
        <xs:annotation>
          <xs:documentation>A temporary contact. The period can provide more detailed information. </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="old">
        <xs:annotation>
          <xs:documentation>This contact is no longer in use (or was never correct, but retained for records)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="mobile">
        <xs:annotation>
          <xs:documentation>A telecommunication device that moves and stays with its owner. May have characteristics of all other use codes, suitable for urgent matters, not the first choice for routine business</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Contact">
    <xs:sequence>
      <xs:element name="system" type="ContactSystem" minOccurs="0">
        <xs:annotation>
          <xs:documentation>What kind of contact this is</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="value" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>code for use of this address</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="use" type="ContactUse" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Text representation of the address</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="period" type="CoreInterval_humanDate" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Time period during which address was/is in use for this purpose</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="dataAbsentReason" type="DataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
    <!--    <xs:attributeGroup ref="dataAbsentReason"/>-->
  </xs:complexType>
  <xs:complexType name="Schedule">
    <xs:sequence>
      <xs:element name="events" minOccurs="0">
        <xs:annotation>
          <xs:documentation>When the event occurs</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="event" type="CoreInterval_humanDate" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="repeat" type="Repeat" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Repeat information, only if there is none or one event</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="dataAbsentReason" type="DataAbsentReason"/>
    <xs:attribute ref="xml:id"/>
    <!--    <xs:attributeGroup ref="dataAbsentReason"/>-->
  </xs:complexType>
  <xs:simpleType name="ScheduleRepeatWhen">
    <xs:restriction base="xs:string">
      <xs:enumeration value="HS">
        <xs:annotation>
          <xs:documentation>event occurs duration before the hour of sleep (or trying to)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="WAKE">
        <xs:annotation>
          <xs:documentation>event occurs duration after waking </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="AC">
        <xs:annotation>
          <xs:documentation>event occurs duration before a meal (from the latin ante cibus) </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ACM">
        <xs:annotation>
          <xs:documentation>event occurs duration before breakfast (from the latin ante cibus matutinus) </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ACD">
        <xs:annotation>
          <xs:documentation>event occurs duration before lunch (from the latin ante cibus diurnus) </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ACV">
        <xs:annotation>
          <xs:documentation>event occurs duration before dinner (from the latin ante cibus vespertinus) </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="PC">
        <xs:annotation>
          <xs:documentation>event occurs duration after a meal (from the latin post cibus) </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="PCM">
        <xs:annotation>
          <xs:documentation>event occurs duration after breakfast (from the latin post cibus matutinus) </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="PCD">
        <xs:annotation>
          <xs:documentation>event occurs duration after lunch (from the latin post cibus diurnus) </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="PCV">
        <xs:annotation>
          <xs:documentation>event occurs duration after dinner (from the latin post cibus vespertinus) </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Repeat">
    <xs:sequence>
      <xs:choice>
        <xs:element name="frequency" type="xs:integer">
          <xs:annotation>
            <xs:documentation>Event occurs frequency times per duration</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="when" type="ScheduleRepeatWhen">
          <xs:annotation>
            <xs:documentation>Event occurs duration from common life event</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:element name="duration" type="Duration">
        <xs:annotation>
          <xs:documentation>repeating or event-related duration</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="count" type="xs:integer">
          <xs:annotation>
            <xs:documentation>number of times to repeat</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="end" type="humanDate-simple">
          <xs:annotation>
            <xs:documentation>when to stop repeats</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
    <xs:attribute ref="xml:id"/>
    <!--    <xs:attributeGroup ref="dataAbsentReason"/>-->
  </xs:complexType>
  <xs:complexType name="Constraint">
    <xs:sequence>
      <xs:element name="type" type="ResourceType" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>The Type of the resource being described</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="name" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>The name of an aggregation profile</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="purpose" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Human summary: why describe this resource?</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="elements" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="element" type="Constraint.Element" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Constraint.Element">
    <xs:sequence>
      <xs:element name="path" type="string" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>The path of the element (see the formal definitions)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="name" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Name this constraint for re-use &amp; unrolling</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="purpose" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Human summary: why describe this element?</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="min" type="integer" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Minimum Cardinality</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="max" type="code" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Maximum Cardinality (a number or *)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="type" type="code" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Type of the element</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="conformance" type="ConformanceType" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Mandatory|Conditional|Optional|Prohibited</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="condition" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Condition if conformance=Conditional</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mustSupport" type="boolean" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>If the element must be usable</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mustUnderstand" type="boolean" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>If the element must be understood</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="definition" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>More specific definition</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="mappings" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="mapping" type="Constraint.Mapping" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="aggregation" type="Constraint.Aggregation" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>If context includes aggregation and type=Resource()</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="valueSet" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Value set id (only if coded)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="values" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="value" type="Constraint.Value" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Constraint.Mapping">
    <xs:sequence>
      <xs:element name="target" type="string" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Which mapping this is (v2, CDA, openEHR, etc)</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="map" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Details of the mapping</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Constraint.Aggregation">
    <xs:sequence>
      <xs:element name="aggregated" type="boolean" minOccurs="1" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Whether this resource is aggregated</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="name" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Reference to a Named Resource Profile</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Constraint.Value">
    <xs:sequence>
      <xs:element name="name" type="string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Reference to another element by element.name</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Fixed value: [as defined for type]</xs:documentation>
        </xs:annotation>
        <xs:element name="boolean" type="boolean"/>
        <xs:element name="integer" type="integer"/>
        <xs:element name="decimal" type="decimal"/>
        <xs:element name="base64Binary" type="base64Binary"/>
        <xs:element name="dateTime" type="dateTime"/>
        <xs:element name="string" type="string"/>
        <xs:element name="uri" type="uri"/>
        <xs:element name="code" type="code"/>
        <xs:element name="oid" type="oid"/>
        <xs:element name="uuid" type="uuid"/>
        <xs:element name="sid" type="sid"/>
        <xs:element name="id" type="id"/>
        <xs:element name="humanDate" type="humanDate"/>
        <xs:element name="Attachment" type="Attachment"/>
        <xs:element name="Identifier" type="Identifier"/>
        <xs:element name="Interval_Quantity" type="Interval_Quantity"/>
        <xs:element name="Interval_integer" type="Interval_integer"/>
        <xs:element name="Interval_decimal" type="Interval_decimal"/>
        <xs:element name="Interval_datetime" type="Interval_dateTime"/>
        <xs:element name="Interval_humanDate" type="Interval_humanDate"/>
        <xs:element name="HumanId" type="HumanId"/>
        <xs:element name="Contact" type="Contact"/>
        <xs:element name="CodeableConcept" type="CodeableConcept"/>
        <xs:element name="Quantity" type="Quantity"/>
        <xs:element name="Duration" type="Duration"/>
        <xs:element name="Ratio" type="Ratio"/>
        <xs:element name="HumanName" type="HumanName"/>
        <xs:element name="Coding" type="Coding"/>
        <xs:element name="Choice" type="Choice"/>
        <xs:element name="Address" type="Address"/>
        <xs:element name="Schedule" type="Schedule"/>
        <xs:element name="Resource" type="ResourceReference"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="ConformanceType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Mandatory">
        <xs:annotation>
          <xs:documentation>The element is or must always be present without a dataAbsentReason</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Conditional">
        <xs:annotation>
          <xs:documentation>The element may need to be present (with no dataAbsentReasons) depending on the condition</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Optional">
        <xs:annotation>
          <xs:documentation>The element may or may not be present</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Prohibited">
        <xs:annotation>
          <xs:documentation>The element can not present or will be rejected if received</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
