<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/xhtml1-strict.xsd" xmlns="http://www.w3.org/1999/xhtml">

<p>
This page describes how FHIR Resources can be used in a traditional messaging 
context, much like HL7 v2. Applications claiming conformance to this framework
claim to be conformant to "FHIR messaging". 
</p>
<p>
In FHIR messaging, a "request message" is sent from a source application to a destination
application when an event happens. Events mostly correspond to things that happen in the 
real world. The request message consists of an <a href="atom.htm#Aggregation">aggregation</a>
of resources, with the first resource in the aggregation being this <i>Message</i> resource. The 
Message resource has a code - the message event - that identifies the nature of the 
request message and carries additional request metadata. The other resources in the 
aggregation depend on the type of the request.
</p>
<p>
The events supported in FHIR, along with the resources that are included in them, are defined below. 
</p>
<p>
The destination application processes the request, and returns one or more response messages 
which are also an <a href="atom.htm#Aggregation">aggregation</a> of resources, with the first 
resource in the aggregation being a <a href="#resource">Message</a> resource with a response
section that reports the outcome of processing the message and any additional response resources 
required. 
</p>

<h2>Basic Messaging Assumptions</h2>
<p>
This specification assumes that content will be delivered from one application
to another by some delivery mechanism, and then a response will be returned 
to the source application. The exact mechanism of transfer is irrelevant to
this specification, but may include file transfer, http based transfer, LLP
(HL7 minimal lower layer protocol), MQ series messaging, or anything else. 
The only requirement for the transfer layer is that requests are sent to 
a known location, and responses are returned to the source of the request. 
This specification considers the source and destination applications as logical
entites, and the mapping from logical source and destination to implementation
specific addresses is outside the scope of this specification.
</p>
<p>
In principle, source applications are not required to wait for a response to a transaction before 
issuing a new transaction. However in many case, the messages in a given stream are dependent
on each other, and must be sent and processed in order. In addition, some transfer methods 
may require sequential delivery of messages.
</p>
<p>
This specification ignores the existence of interface engines and message transfer agents that 
exist between the <i>source</i> and <i>destination</i>. Either they are transparent to the message/transaction 
content, and irrelevant to this specification, or they are actively involved in manipulating the 
message content. If these middleware agents are modifying the message content, then they become
responsible for honoring the contract described below in both directions.
</p>
<h3>Absence of Reliable Messaging</h3>
<p>
Some of the message delivery mechanisms mentioned above are reliable delivery
systems - the message is always delivered, or an appropriate error is returned
to the source. However most implementations use methods which do not provide
reliable messaging, and either the request or the response can get lost in transit.
FHIR messaging describes a simple approach to handle this that applications 
must conform to, whether messaging appears to be reliable or not.
</p>
<p>
A message receiver must always check the incoming aggregation package ids,
and check them against a store of previously received messages (going back 
a reasonable period in time). If it receives a duplicate message id that 
it has already responded to, it should assume that the original response 
was lost (failed to return to the request issuer), and resend the original 
response in a new aggregation package with Message.response.duplicate set 
to true. If the source application gets no response to it's request from 
the destination application, the source application should resend the 
same aggregation with the same aggregation package id. 
</p>

<h2>Conformance Statement</h2>
<p>
Applications claiming to be conformant to "FHIR messaging" may choose 
to publish a conformance statement that lists all the message events 
they support, either as sender or listener, and for each event, a 
profile that states which  resources are aggregated (sender), or 
are required to be aggregated (listener), and any rules about the 
information content of the individual resources. The conformance 
statement is a <a href="conformance.htm">resource with the name 
"Conformance"</a>.
</p>

<a name="endpoints"></a>
<h2>Messaging End-points</h2>

<p>There are two end-points defined for a RESTful server that supports Messages:</p>

<ul>
 <li>[baseurl]/message/: a normal RESTful end point for message resources</li> 
 <li>[baseurl]/mailbox: an address at which messages can be delivered</li> 
</ul>
<p>
The first end-point is used for working within the message contents, for instance, for building 
messages piecemeal, or for auditing received messages. <b>Creating or updating Message resources
to this end point does not represent the actual occurance of any event, not can it trigger
any logic associated with the actual event</b>; it is just for managing message resources.
</p>
<p>
The second end-point is used for actually sending messages as atom aggregations, to indicate 
that the event identified by the code has occured. The end-point responds with a message
response as defined for the particular event, or an error indicating that the attempt to 
process the message was unsuccesful. The functionality of this end-point <a href="#mailbox">is described below</a>.
</p>
<p>
Note: While the end-points above are defined for use with message resources, and for delivering
messages to a RESTful server, it is not necessary to use them; messages may be transported 
between systems using any method desired.
</p>

<a name="resource"></a>
</div>
