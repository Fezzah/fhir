<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Extensibility - FHIR v<%version%></title>
    <link rel="Stylesheet" href="fhir.css" type="text/css" media="screen" />
</head>

<body>
<%header%>
<%sidebar%>

<%maindiv%>

<h1>Extensibility</h1>

<p>
This exchange specification is based on generally agreed common
requirements across healthcare - many jurisdications, domains, and 
different functional approaches. As such, it is common for 
specific implementations to have valid requirements that will not
be adopted by this specification. Adopting all of these requirements 
would make this specification very cumbersome and difficult to
implement. Instead, this specification expects that these additional
common requirements will be implemented as extensions.
</p> 
<p>
As such, extensibility is a fundamental part of the design of this 
specifications. Every resource includes an extensions section that 
may be used to represent additional information that is not part of 
the basic definition of the resource. Conformant applications are not
allowed to reject resources because they contain extensions, though
they may need to reject resources because of the specific contents of
the extensions.
</p>
<p>
Note that unlike in many other specifications, there can be no stigma 
associated with the use of extensions by any application, project, or 
standard, whatever institution or jurisdiction uses or defines them; their use of
such extensions is what allows the specification to retain a core 
simplicity for everyone.
</p>
<p>
In order to make the use of extensions safe, and manageable, there is a 
strict governance applied to the definition and use of extensions. Though
any implementer is allowed to define an extension, there is a set of reqiurements 
that must be met as part of the definition of the extension.
</p>
<h2>Extensibility Element</h2>
<p>
Each resource includes the optional extensions element before the narrative element at the end of the resource.
</p>
<%dt Extensions%>

<p>
Notes:
</p>
<ul>
 <li>The <i>code</i> identifies the meaning of the extension. The only codes that can be used are those defined using the methodology described below.</li>
 <li>The source of the definition must be declared using the <i>definition</i> element. The <i>definition</i> may point directly to a computable or human readable definition of the extensibility codes, or it may be a logical URI as declared in some other specification. The definition should be version specific.</li>
 <li>If present, the id in the <i>ref</i> element identifies a target element that is extended by the content as if it contained the extension itself. The id must point within the same resource</li>
 <li>The order that extensions appear in is significant - where multiple extensions have the same ref id, they extend the target element in the order in which they appear in the extensions</li>
 <li>When using xml:id attributes, <a href="atom.htm#Aggregation">the comments in the aggregation section</a> about the value of the xml:id attribute should be kept in mind</li>
 <li>Any element defined as part of the resource content, or any repeating element inside a data type, may carry an id attribute to serve as the target of an extension</li>
 <li>An extension may have a value, or nested extensions, but not both. The actual name of the value element has the type added to it in place of the [x], such as valueQuantity</li>
</ul>
<p>
As well as providing additional undescribed information, extensions may be used to qualify the meaning of other elements in a way that makes them 
unsafe to ignore, or even to negate the meanings of other elements. Such extensions must have a state of "must-understand". Over time, an extension
may be promoted to become part of the resource itself. In order to properly send the data, the extension should still be present, but should have no
value element. Instead, the state of the extension is "superceded", and the ref points to the correct location for the data.
</p>
<p>
<b>Any application processing the data of a resource must check for extensions with state="must-understand".</b> If the application does not recognise the code on an extension that is labeled
"must-understand", and where the extension either has no internal reference, or the reference is data processed by the application, it SHALL either refuse to process the data, 
or carry a warning concerning the data along with any action or output that results from processing the data. 
Note that it must always be safe to show the narrative to humans; any extension that is labelled as must-understand must be represented in the narrative.
Applications are encouraged to ignore un-required extensions that they do not recognise. Applications that do not accept unknown extensions should declare 
this in their conformance statement.
</p>
<p>
The <i>value[x]</i> element has the [x] replaced with the name of one of the defined types, and the contents as defined for that type, or another extension. The value type may be one of the following:
</p>
<ul class="dense">
 <li>dateTime</li>
 <li>string</li>
 <li>uri</li>
 <li>humanDate</li>
 <li>Attachment</li>
 <li>CodeableConcept</li>
 <li>Coding</li>
 <li>Identifier</li>
 <li>Quantity</li>
 <li>Choice</li>
 <li>Interval_Quantity</li>
 <li>Interval_humanDate</li>
 <li>Ratio</li>
 <li>HumanId</li>
 <li>HumanName</li>
 <li>Address</li>
 <li>Contact</li>
</ul>
<p>
Nested extensions cannot have a <i>ref</i> element. The <i>[type]</i> element is optional unless the definitions of the extension codes make rules about it. Extensions can never have a default value.
</p>

<h2>Defining Extensions</h2>

<!--

the question is whether an extension could ever alter the interpretation of something other than it's immediate context
[7:12:13 AM] Grahame Grieve: and I suggest that the answer to this is definitional
[7:12:16 AM] Grahame Grieve: and no.
[7:12:23 AM | Edited 7:12:25 AM] Grahame Grieve: that's what defines it's context
[7:13:02 AM] Lloyd McKenzie: Well, mood, negationInd, uncertaintyInd, inversionCode, etc. all only alter immediate context.
[7:13:20 AM] Lloyd McKenzie: Off the top of my head, I can't think of any that would alter something else.
[7:13:57 AM] Lloyd McKenzie: I'm ok with the idea of banning extensions that alter the meaning of anything outside their immediate context.  (If you want to do that, you need to define an extension that sits inside the context you want to alter.)
[7:14:51 AM] Grahame Grieve: right
[7:15:27 AM] Grahame Grieve: so then, must-understand is always qualified by the fact that if you don't process/understand the context it refers to, then you don't actually need to understand it

-->
<p>
Extensions may be defined by any project or jurisdication, up to and including international standards organisations such as HL7 itself. 
</p>
<p>
Extensions are always defined against some particular context. The following are possible contexts for an extension:
</p>
<ul class="dense">
 <li>A particular element in a single resource</li>
 <li>Anywhere a particular data type is used</li>
 <li>A set of elements across one or more resources</li>
 <li>a particular context in one of the mapped reference models</li>
 <li>Another extension</li>
</ul>
<p>
In addition, an element definition might apply additional constraints with 
regards to particular element values of the target that make it's use appropriate.
Extensions SHALL only be used in the contect against which they are defined.
</p>
<p>
Each extension is defined using the following fields:
</p>
<p>todo: metadata, context</p>
<table class="codes">
 <tr><td>Code</td><td>Required</td><td>The code that is used in a resource to identify this extension</td></tr>
 <tr><td>Context</td><td>Required</td><td>The context of this extension. See below</td></tr>
 <tr><td>TargetType</td><td>Optional</td><td>The type of the path to which this applies, if it matters. This must be a valid FHIR data type as described above</td></tr>
 <tr><td>Cardinality</td><td>Required</td><td>The cardinality of this extension.<br/> Specifying a minimum cardinality of 1 means that if the source system declares that it conform to the set of extensions containing this extension, it must be included in the resource</td></tr>
 <tr><td>Conformance</td><td>Required</td><td>Whether the use of the extension is mandatory, conditional, optional, or prohibited. If the extension is conditional, the conditions must be described in the comments field. This field overlaps with the cardinality, and must be consistent with it.</td></tr>
 <tr><td>Type</td><td>Required</td><td>The type(s) of the extension. This must be a valid FHIR data type as described above, or "Extension: x,y,z" which indicates that the extension codes x,y, and z will be contained in the extension</td></tr>
 <tr><td>Concept Domain</td><td>Conditional</td><td>For the types CodeableConcept and Coding. see <a href="terminologies.htm">Terminologies</a></td></tr>
 <tr><td>Must Understand</td><td>Required</td><td>Whether the extension must be understood by any system reading the resource. There is 3 possible values: "true" - the extension must be understood, "false" - the extension does not need to be understood, and "sender" - the sender can decide whether the extension needs to be understood</td></tr>
 <tr><td>Definition</td><td>Required</td><td>A formal statement of the meaning of the content of the field</td></tr>
 <tr><td>Requirements</td><td>Required</td><td>Discussion of the reason for the extension / what use cases it was defined to handle</td></tr>
 <tr><td>Comments</td><td>Optional</td><td>Additional other information about the extension, including information concerning it's conditionality if indicated in the conformance field</td></tr>
 <tr><td>RIM Mapping</td><td>Conditional</td><td>The formal mapping from this extension to the RIM. Required for HL7 defined extensions, but may be optional in other contexts</td></tr>
 <tr><td>v2 Mapping</td><td>Optional</td><td>Mapping to a v2 segment/field/etc, if desired and appropriate. </td></tr>
</table>
<p>
Notes:
</p>
<ul>
 <li>Mappings are not required to be computable (i.e. executable logic). Mappings to other specifications can also be provided.</li>
</ul>
<p>
Whenever resources containing extensions are exchanged, the definitions of the extensions must be available to all the parties that share the resources. 
Each extension contains a URI that references the source of the definitions. The source can be a literal reference, such as an http: url that refers
to an end-point that responds with the contents of the definitions, or a logical reference (e.g. using a urn:) - for instance, to a national published
standard. Literal references are preferred. 
</p>
<p>
Whether the reference is a literal or logical reference, the extension definitions must be published using the fields defined as above. 
They may be published in narrative form, possibly as part of a larger specification. This narrative form is for human consumption. 
In addition, they may be published in a structured form, as either a csv file, or an XML file. The CSV file should have the fields 
described above as columns in the order described above, with a title row containing the case sensitive field names as above. XML
files should use the format described in the <a href="definitions.xsd">XML Definitions schema</a> (note that element and extension
definitions from FHIR itself also use the same format).
</p>
<p>

Todo: extension packs &amp; metadata


Control
* resources are balloted
* implementations (jurisdictions, institutions, projects) must publish their extensions through HL7 extension registry/repository (will be distributed?)
* extensions may be submitted to HL7 for endorsement. Committees approve them by in-committee vote, and then HL7 publishes them with endorsement
* extensions should never be redefined once in used. (endorsed extensions can't have their RIM mappings changed)

</p>
<p>
As well as defining the base element structure for resources, HL7 also publishes extensions.
When HL7 itself publishes extensions as part of the FHIR specification, these extensions must 
be used for this data whenever the data is represented in instances. HL7 publishes data definitions
as extensions rather than as part of the base resource structure in order to keep the base 
resource structure simple and concise, and to allow implementors not to engage with an entire world's
worth of functionality up front. Note that HL7 extensions are never flagged as must-understand - if 
HL7 publishes resource content that <i>must</i> be understood, it will be part of the resource 
content itself, since everyone has to understand it anyway.
</p>
<p>
Implementations are encouraged to share their extensions with HL7; the domain committees will work 
to elevate the extensions into HL7 published extensions or the into the base resource structure itself.
</p>

<%footer%>

<%/maindiv%>    
</body>
</html>