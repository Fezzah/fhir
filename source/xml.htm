<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Resource Format - FHIR v<%version%></title>
    <link rel="Stylesheet" href="fhir.css" type="text/css"/>
    <link rel="Stylesheet" href="fhir-print.css" type="text/css" media="print" />
</head>

<body>
<%sidebar%>


<%maindiv%>

<%xmlheader%>

<h1>Resource Format</h1>
<p>
A resource is an entity that:
</p>
<ul>
 <li>Has a known identity by which it can be addressed</li>
 <li>identifies itself as one of the resource types defined in this specification</li>
 <li>contains a set of structured data items as described by the resource definition</li>
 <li>contains a human readable XHTML representation of the content of the resource</li>
 <li>may change over time</li>
</ul>
<p>
Resources have multiple representations. A resource is valid if it meets that above rules, and is represented in 
either XML or JSON according to the rules defined in this specification. Other representations are allowed, but 
are not described by this specification.
</p>
<p>
This page documents how the content of the resources are described and controlled. 
</p>

<h2>Resource Description</h2>
<p>
The resources are described in two different ways: a UML diagram that summarises the content, and 
an pseudo-XML syntax that provides a visual sense of what the end resource instances will look like. 
The syntax uses the following notation:
</p>

<pre class="spec">
 &lt;<b>name</b> xmlns="http://hl7.org/fhir" [xml:lang]&gt; 
   &lt;<u><b title="Formal Definition (must tbe supported or understood)">nameA</b></u>&gt;<font color="Gray">&lt;!-- </font><font color="brown">1..1</font> <font color="Darkgreen">type</font> <font color="Navy">description of content</font> <font color="Gray"> --&gt;</font>&lt;nameA&gt;
   &lt;<b title="Formal Definition">nameB</b>&gt;<font color="Gray">&lt;!-- </font><font color="deeppink" title="Condition">0..1</font> <font color="darkgreen">type</font> <font color="Navy">description</font> <font color="Gray"> --&gt;</font>&lt;/nameB&gt;
   &lt;<b>nameC</b>&gt; <font color="Brown"><font color="Gray">&lt;!-- </font> <b>1..*</b> --&gt;</font>
     &lt;<b>nameD</b> &gt;<font color="Gray">&lt;!-- </font><font color="brown">1..1</font> <font color="darkgreen">type</font>&gt;<font color="navy">Relevant records</font> <font color="Gray"> --&gt;</font>&lt;/nameD&gt;
   &lt;/nameC&gt;
 &lt;name&gt;
</pre>
<p>
Notes:
</p>
<ul>
 <li>To build a valid instance of a resource, simply replace the contents of the elements with valid content as described by the cardinality, type rules and content description found in the comment in each element.</li>
 <li>Elements are assigned a cardinality that specifies how many times the element may or must appear. If the cardinality is shown in 
    <font color="deeppink">Pink</font> then there is an additional condition that impacts on the allowed cardinality. This is available as a mouse-over text, or in the formal definitions.</li>
 <li>The elements are assigned one or more types. All of the types are defined in <a href="datatypes.htm">the data types</a> except for "Resource" and "Narrative" that are documented below. The type names are hyperlinked.</li>
 <li>Each element name in the pseudo-syntax is also a hyperlink to the formal definition of the element in the data dictionary that underlies the exchange formats. </li>
 <li>If the element name is underlined, then applications are required to support and/or understand it (see below).</li>
 <li>The XML character set is always Unicode. Specifying the character encoding is optional but recommended (default value is UTF-8, as for XML). Any encoding that is round trip compatible with Unicode is allowed.</li>
 <li>FHIR elements are always in the namespace <a href="http://hl7.org/fhir">http://hl7.org/fhir</a>.  This is usually specified as the default namespace on the root element. 
   The only other namespaces that occur in FHIR resources are where some external content model is explicitly introduced into the resource content model. For example, XHTML is found in every resource - see below.</li>
 <li>Any of the XML elements may have an id attribute to serve as <a href="#idref">the target of an internal reference</a>. The id attribute is not shown in this format.</li>
 <li>FHIR elements are never empty. If an element is present in the resource, it must have either text or child elements as defined for its type, or an id attribute that is the <a href="#idref">link target</a> of <a href="#narrative">narrative</a> or <a href="extensibility.htm">extensions</a></li>
 <li>The xml:lang attribute may appear on the root element, where it specifies the base language of the resource. It may also appear on <a href="datatypes.htm#Attachment">attachments</a> and in the XHTML content, but nowhere else</li>
 <li>In addition to this descriptive syntax, other definitional forms are available, including W3C schema and Schematron. The formats Relax NG schema, RDF and eCore are planned.</li>
</ul>
<p>
When represented as XML, resources may be validated by schema and schemas are provided, but 
operational systems are not required to do so (though the XML must always be 
valid against this specification and the schema and Schematron). In addition to 
the simple XML description, W3C Schema, UML models, and other definitional models 
are provided that may be a useful aid for system implementation. Resources may 
also be represented using <a href="json.htm">JSON</a>.
</p>
<p>
The UML diagrams represent the same content as a series of classes. The root element
class is labeled with an "R" for resource, or a "D" for a data type . All the other 
classes have "E" since they represent elements that appear the instance. 
</p>
<pre>
  todo: insert diagram
</pre>
<p>
Where an element can have a choice of data types, these are represented in the 
choice using the same syntax as the xml syntax. Due to way UML works, the actual 
order of the elements cannot be determined from the diagram. 
</p>

<a name="metadata"></a>
<h2>Resource Content and Metadata</h2>
<p>
All resources contain extensions, a data section, and then a narrative section at the end:
</p>
<pre class="spec">
&lt;<a href="#ResourceDefn" title="A Resource Definition for FHIR" class="dict"><b>[Name]</b></a> xmlns="http://hl7.org/fhir"&gt;
 &lt;<a href="extensibility.htm" title="See Extensions" class="dict"><b>extension</b></a>&gt;<font color="Gray">&lt;!-- <font color="brown"><b>0..*</b></font> </font> <font color="darkgreen"><a href="extensibility.htm">Extension</a></font>   <a href="extensibility.htm"><font color="navy">See Extensions</font></a> <font color="Gray"> --&gt;</font>&lt;/extension&gt;
 <font color="Gray">&lt;!-- Defined Content for Resource --&gt;</font>
 &lt;<a href="#Narrative" title="Text summary of resource, for human interpretation" class="dict"><b>text</b></a>&gt;<font color="Gray">&lt;!--</font> <font color="brown"><b>1..1</b></font> <font color="darkgreen"><a href="#Narrative">Narrative</a></font> <font color="navy">Text summary of [x], for human interpretation</font><font color="Gray"> --&gt;</font>&lt;/text&gt;
&lt;/[Name]&gt;
</pre>
<p>
The use of the <i>extension</i> element is <a href="extensibility.htm">discussed under "Extensibility"</a>. 
The text ("Narrative") is <a href="#Narrative">discussed below</a>. 
</p>
<p>
In addition to the content inside the resource, there are several pieces of metadata about a resource that are not part of the resource
content, yet are key aspects of the resource and how it behaves. For implementation reasons, these are represented outside the resource:
</p>
<table class="grid">
  <tr><th>Metadata Item</th><th>Type</th><th>Usage</th></tr>
  <tr><td>Logical Id</td> <td><a href="datatypes.htm#id">id</a></td> <td>The identity of the resource. 
    Resources always have a known identity. Resource identification is <a href="#Resource">discussed further below</a></td></tr>
  <tr><td>Version Id</td><td><a href="datatypes.htm#id">id</a></td><td>Changed each time the content of the resource changes. 
    Can be referenced in a resource reference (<a href="#Resource">see below</a>). Can be used to ensure that updates are based on the latest version of the resource. 
  <br/>The version can be globally unique, or scoped by the Logical Id. Since version ids must be unique, they are generally either a serially incrementing id 
     scoped by the logical id, or a uuid, though neither of these approaches is required</td></tr>
  <tr><td>Last Modified Date</td><td><a href="datatypes.htm#instant">instant</a></td><td>Changed each time the content of the resource 
    changes. Can be used by a system or a human to judge the currency of the resource content.</td></tr>
</table>
<p>
In any environment where the resources are used, the technical details of how these metadata elements 
are represented will need to be resolved. For further details, see <a href="implementation.htm">Implementation 
Details</a>, which also contains a discussion of how resource identity is maintained.
</p>
<p>
The logical id and version id of a Resource are of type <a href="datatypes.htm#id">id</a> which is up to 36 characters long and contains:
</p>
<table class="list">
  <tr><td>A whole number in the range 0 to 2^64-1. May be represented in hexadecimal</td></tr>
  <tr><td>A uuid (guid) (in lowercase, without wrapping with the characters "{}[]" which sometimes occur)</td></tr>
  <tr><td>An <a href="http://en.wikipedia.org/wiki/Object_identifier">ISO OID</a></td></tr>
  <tr><td>Any other combination of letters, numerals, "-" and "."</td></tr>
  <tr><td></td><td></td></tr>
</table>
<p>
Resource ids are case sensitive. Ids are always opaque, and systems need not and should not attempt to determine their internal structure. 
However the id is represented, it must always be represented in the same way in resource references and URLs.
</p>

<hr/>
<a name="mustUnderstand"> </a>
<a name="mustSupport"> </a>
<h2>Must-Understand, and Must-Support</h2>
<p>
FHIR defines two properties for all resource elements: Must-Understand, and Must-Support. These interact 
to place conformance requirements on implementations. 
</p>
<h3>Must-Understand</h3>
<p>
Must-Understand is a property that is assigned when an element is defined. An element is labelled "mustUnderstand=true" if 
the value it contains may change the interpretation of other elements or the resource as a whole. Typical examples
of elemnets that are labelled "must-understand" are elements such as "status", "active", or "certainty". 
Elements are defined either in the base resources themselves, as part of the FHIR specification, or 
where profiles declare extensions. The value of mustUnderstand cannot be changed when element usage
is described in a <a href="profile.htm">Resource Profile</a>.
</p>
<p>
Generally, elements labelled "mustUnderstand=true" also have a minimum cardinality of 1, to introduce
certainty in their handling. Irrespective of the minimum cardinality, implementations producing resources
SHALL ensure that appropriate values for mustUnderstand elements are provided. MustUnderstand elements
SHALL be represented in the narrative summary of the resource.
</p>
<p>
Implementations processing resources SHALL understand the impact of the element when they process 
the resource. Implementations are not required to "support" the element in any meaningful way - they 
amy achieve this by rejecting instances that contain values outside those they support (for instance,
an application may refuse to accept observations with a reliability != "ok"). Alternatively,
implementations may be able to sure, due to their implementation environment, that such values 
will never occur. However applications SHOULD always check the value irrespective of this.
</p>
<h3>Must-Support</h3>
<p>
Labelling an element Must-Support means that implementations that produce or consume must 
provide "support" for the element in some meaningful way. Exactly what this means is impossible
to describe or clarify as part of the FHIR specification.
</p>
<p>
For this reason, the specification itself never labels any elements as must-support. 
This is done in <a href="profile.htm">Resource Profiles</a>, where the profile that 
labels an element as mustSupport=true. When a profile does this, it must also make clear
exactly what kind of "support" is required, as this can mean many things.
</p>

<p>
Note that an element that has the property mustUnderstand is not necessarily a "key" element (e.g. one of 
the important elements to make use of the resource), nor is it automatically mustSupport - however both 
of these things are likely to be true.
</p>

<hr/>


<a name="Narrative"> </a>
<a name="narrative"> </a>
<h2>Narrative</h2>
<p>
Every resource SHALL include a human readable narrative that contains a summary of the resource, 
and may be used to represent the content of the resource to a human. The narrative need 
not encode all the structured data, but is required to contain sufficient detail to make 
it "clinically safe" for a human to just read the narrative. Resources may define 
what content should be represented in the narrative to ensure clinical safety.
</p>
<p>
The narrative for a resource is allowed to contain additional information that is not in 
the structured data, including human-edited content. Such additional information must be 
in the scope of the definition of the resource. In small, closed trading partner environments,
there may be no need for a narrative text. In such cases, implementations are allowed to 
populate the narrative with text equivalent to "No human readable text provided for this resource" (other languages are allowed). 
Implementers should note that small, closed trading partner environments are very likely 
to open up during the lifetime of the resources they define.
</p>
<p>
The narrative is an xhtml fragment that also includes images if appropriate:
</p>
<%dt Narrative%>

<p>
The contents of the <i>div</i> element are an XHTML fragment containing only the basic html formatting elements described in 
chapters 7-11 (except section 4 of chapter 9) and 15 of the HTML 4.0 standard, &lt;a&gt; elements (either name or href),
images and internally contained style attributes. The XHTML content must not contain
a head, a body element, external stylesheet references, scripts, forms, base/link/xlink, frames, iframes,
and objects. The div element must have some non-whitespace content.
<!-- Todo: Formally encode these constraints in schematron -->
</p>
<div class="example">
<pre class="xml" fragment="Narrative">
  &lt;narrative&gt;
    &lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;This is a simple 
          example with only plain text&lt;/div&gt;
  &lt;/narrative&gt;
   
  &lt;narrative&gt;
   &lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;
     &lt;p&gt;
       This is an &lt;i&gt;example&lt;/i&gt; with some &lt;b&gt;xhtml&lt;/b&gt; formatting.
     &lt;/p&gt;
   &lt;/div&gt;
  &lt;narrative&gt;
</pre>
</div>
<p>
The image source may be a local reference within the resource:
</p>
<pre class="xml">
  &lt;img src="#a5"/&gt;
</pre>
<p>
This is an <a href="#idref">internal reference</a> to an id attribute on an element in the same resource, either in the image attachments on the text element 
directly, or an element of type "<a href="datatypes.htm#Attachment">Attachment</a>".
</p>
<div class="example">
<pre class="xml" fragment="Narrative">
  &lt;narrative&gt;
    &lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;p&gt;
        &lt;img src=&quot;#a1&quot;/&gt;.
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;image id=&quot;a1&quot;&gt;
      &lt;mimeType&gt;image/png&lt;/mimeType&gt;
      &lt;content&gt;MEKH....SD/Z&lt;/content&gt;
    &lt;/image&gt;
  &lt;/narrative&gt;
</pre>
</div>

<p>
Since the presence of images that are not part of the resource is not guaranteed, 
images that are an essential part of the narrative should always be embedded.
</p>
<p>
Note: the XHTML is contained in general XML, and there is no support for HTML entities
like <i>&amp;nbsp;</i> or <i>&amp;copy;</i> etc. Unicode characters should be used instead. Note that 
<i>&amp;#160;</i> substitutes for <i>&amp;nbsp;</i>.
</p>

<a name="css"></a>
<h3>Styling the XHTML</h3>
<p>
The XHTML fragment in the narrative may be styled using CSS in the normal fashion, using a mix of classes, ids 
and in-line style elements. Specific CSS stylesheets will be applied to the XHTML when it is extracted from
the resource to be displayed to a human to create the presentation desired in the context of use. Authors
may fix the following styling aspects of the content:
</p>
<ul>
  <li>bold, italic, underline, strikethrough</li>
  <li>font color, family, and size</li>
  <li>background color, text alignment</li>
  <li>whitespace interpretation</li>
  <li>ordered list number format (since it may be referred to in text)</li>
</ul>
<p>
These style properties are specified in-line using the style attribute. If an equivalent 
html element exists, such as "i", or "pre", it may be used instead, but note that some of these 
elements are deprecated in HTML 4 and must not be used in Narrative XHTML (including "u", and "font").
</p>
<p>
Rendering systems are required to respect any of these rendering styles when they are specified in 
the XHTML, though appropriate interpretation is allowed (e.g. a low-contrast display for dark 
room contexts may adjust colors accordingly). 
</p>
<p>
Authors are allowed to specify additional styles and style properties as specified in the CSS specification,
but these are extensions to this specification and renderers are not required to honor them. Note, however,
the additional rules around styling that apply in the context of <a href="document.htm#css">documents</a>.
</p>
<p>
Note: styles in resources can make use of the styles defined in the standard FHIR stylesheet, which
lives here: <a href="http://hl7.org/implement/standards/fhir/fhir.css">http://hl7.org/implement/standards/fhir/fhir.css</a>.
Since this stylesheet is not referred to directly, rendering systems may take their own copy if they wish. 
Authoring systems should not depend on these styles being defined for clinical content. 
</p>
<a name="idref"></a>
<a name="id"></a>
<h2>Internal References</h2>
<p>
There are 4 cases where elements inside a resource reference each other:
</p>
<ul>
 <li>Inside a <a href="datatypes.htm#CodeableConcept">CodeableConcept data type to identify the primary encoding</a></li>
 <li>An &lt;img src=""/&gt; reference in the narrative, referring to an image found in the resource</li>
 <li>Between elements in the narrative and structured data elements</li>
</ul>
<p>
These references are done using an id/idref based approach, where a source element indicates that it 
has the same content as the target element. The target element has an attribute "id" which must 
have a unique value within the resource with regard to any other id attributes. The "id" attribute is not in any namespace.
The source element has no content (text or children elements) and just a single attribute named "idref". The value of 
the idref attribute must match the value of an id attribute in the same resource (or, for a CodeableConcept, inside the
same datatype). 
</p>
<div class="example">
<pre class="xml">
  &lt;example&gt;
    &lt;target id="a1"&gt;
      &lt;child&gt;content&lt;/child&gt;
    &lt;/target&gt;
    &lt;-- other stuff --&gt;
    &lt;source idref="a1"&gt;
  &lt;/example&gt;
</pre>
</div>
<p>
In a single resource, this works exactly like xml:id/idref, but there is an important difference: the 
uniqueness and resolution scope of these id references is within the resource that contains them. If multiple
resources are combined into a single piece of XML, such as an <a href="atom.htm">atom feed</a>, duplicate 
values may occur between resources. This must be managed by applications reading the resources.
</p>
<p>
Note that all references between the xhtml elements and the data elements must be understood to 
establish a "derived from" relationship, where the derived content (whether text or data) refers 
to the source content.
</p>

<a name="ResourceReference"></a>
<a name="Resource"></a>
<h2>Resource References</h2>
<p>
The "Resource" type indicates a reference from one resource to another.
</p>
<%dt ResourceReference%>
<p>Notes:</p>
<ul>
 <li>The reference must specify the resource type, whether or not the type of the resource reference is fixed for the element in the resource definition.</li>
 <li>Using absolute URLs provides a stable scalable approach suitable for a cloud/web context, while using relative/logical references provides a 
   flexible approach suitable for use when trading across closed eco-system boundaries. (see <a href="implementation.htm#identity">implementation issues for further discussion</a>)</li>
 <li>Absolute URLs do not need to point to a FHIR RESTful server, though this is the preferred approach. If the url 
   conforms to the structure ""/[type]/@[id]"" then it should be assumed that the reference is to a FHIR RESTful server. Whether or not the reference is to a FHIR RESTful server,
   the reference must point to a Resource as defined by this specification</li>
 <li>URLs are always considered to be case-sensitive and lowercase is preferred.</li>
 <li>The display is generally not the same content as the Resource.text of the referenced resource.  The purpose is to 
   identify what's being referenced, not to describe it.</li>
 <li>The use of inline resources is discussed below</li>
</ul>

<div class="use">
<p><b>Use</b></p>
<p>
[%dt.constraints ResourceReference%]
</p>
</div>

<div class="example">
<p>A relative reference to the <a href="patient.htm">patient</a> "034AB16" in an element named "context" on a FHIR RESTful server:</p>
<pre class="xml" fragment="ResourceReference">
  &lt;context&gt;
    &lt;type&gt;Patient&lt;/type&gt;
    &lt;url&gt;../patient/@034AB16&lt;/url&gt;
  &lt;/context&gt;
</pre>
<p>An absolute reference to a <a href="profile.htm">resource profile</a> in an element named "profile":</p>
<pre class="xml" fragment="ResourceReference">
  &lt;profile&gt;
    &lt;type&gt;Profile&lt;/type&gt;
    &lt;url&gt;http://fhir.hl7.org/svc/profile/@c8973a22-2b5b-4e76-9c66-00639c99e61b&lt;/url&gt;
  &lt;/profile&gt;
</pre>
<p><i>Note that HL7 has not yet actually created a profile registry, nor decided on a URL for it</i>.</p>
<p>
A short display text that provides a human readable identification of the resource may be provided:
</p>
<pre class="xml" fragment="ResourceReference">
  &lt;custodian&gt;
    &lt;type&gt;Organization&lt;/type&gt;
    &lt;url&gt;../organization/@123&lt;/url&gt;
    &lt;display&gt;HL7, Inc&lt;/display&gt;
  &lt;/custodian&gt;
</pre>
<p>
This text can be used by a system that is unable to resolve the reference to an actual resource.
</p>
</div>

<h3>Contained Resources</h3>
<p>
In some circumstances, the content referred to in the resource reference does not have an independent 
existence apart from the resource that contains it - it cannot be identified independently, and nor 
can it have it's own independent transaction scope. Typically, such circumstances arise where the resource
is being assembled by a secondary user of the source data, such as a middleware engine. If the data available
when the resource is constructed does not include record keys or absolute identification information, then
a properly identified resource cannot be assembled, and even if an arbitrary identification was associated
with it, the resource could never be the subject of a transaction outside the context of the resource that
refers to it.
</p>
<p>
In these circumstances, the resource is placed directly in line in the reference. <b>This should never be 
done when the content can be identified properly, as once identification is lost, it is extremely difficult 
(and context dependent) to restore it again.</b>
</p>
<pre class="xml" fragment="ResourceReference">
  &lt;profile&gt;
    &lt;type&gt;Patient&lt;/type&gt;
    &lt;url&gt;#a1&lt;/url&gt;
	&lt;Patient id="a1"&gt;
	  &lt;!-- whatever information is available --&gt;
	&lt;/Patient&gt;
  &lt;profile&gt;
</pre>
<p>
The type and url are always required, even though somewhate redundant in this case, to ensure that a
single approach to resolving resource references can be used - simply be resolving the URL, and accessing
accordingly.
</p>
<p>
Some notes about use and interpretation of contained resources:
</p>

<ul>
  <li>Contained resources share the same internal id resolution space as the parent resource</li>
  <li>Resources that are contained inline also "inherit" context from their parent resource. For instance, if 
    the parent resource contains a "subject", and the contained resource also has a a subject element defined, 
    but does not specify any subject, a processing application may infer that the subject is the same. Note,
    however, that such inferences are specific to a particular circumstance. There is no rule, for instance, 
	that the meaning of the "subject" element is the same in both parent and contained resources</li>
  <li>Contained resources do not need to contain any narrative</li>
</ul>


<a name="version"> </a>
<h2>Inter-version Compatibility</h2>
<p>
There is no explicit version marker in the XML. Subsequent versions
of this specification may introduce new elements at any point in the 
content models, but the path and meaning of existing data elements will not be 
changed. Given that, in a typical scenario, mixed versions may need to exist, 
applications SHOULD ignore elements that they do not recognize unless those
elements are marked with a "must understand" attribute. However, in 
a healthcare context, many application vendors are unwilling to 
consider this approach because of concerns about clinical risk or 
technical limitations in their software (i.e. schema based processing). 
Applications are not required to ignore unknown elements, but must
declare whether they will do so in their conformance statements using the <i>acceptUnknown</i> element.
</p>
<p>
Note that the version of FHIR supported is a mandatory element in the
applications' conformance profile.
</p>

<h2>XML Schema and Schematron</h2>
<p>
This specification provides schema definitions for all of the content models described here. 
The base schema is called "<a href="fhir-base.xsd">fhir-base.xsd</a>" and defines all of the 
datatypes and also the base infrastructure types described on this page. In addition, there 
is a schema for each resource and a common schema <a href="fhir-all.xsd">fhir-all.xsd</a> 
that includes all the resource schemas.  A customized atom schema <a href="fhir-atom.xsd">fhir-atom.xsd</a>
is provided for validating <a href="atom.htm">bundles</a>.
</p>
<p>
In addition to the w3c schema files, this specification also provides Schematron files that
enforce the various constraints defined for the datatypes and resources.  These are packaged
as files for each resource as well as a combined fhir-atom.sch file
that incorporates the rules for all resources.
</p>
<p>
XML that is exchanged must be valid against the w3c schema and Schematron, though there is no requirement to
validate instances against either, nor is being valid against the schema and 
Schematron sufficient 
to be a conformant instance. (This specification makes several rules that cannot be checked 
by either mechanism.) Exchanged content must not specify the schema or even the schema instance 
namespace in the resource itself. 
</p>

<!-- Todo: Relax NG, RDF, eCore -->

<a name="objects"></a>
<h2>Object Models</h2>
<p>
In addition to the schema, this specification also provides object
models defined in UML that may be of assistance in defining systems 
that work with the resources defined here.
</p>
<p>
Although the UML models provided express the same contents as the 
resource formats, because of the wide variation in how different architectures and 
tools map from UML to XML, there should be no expectation that any particular
tool will produce compatible XML from these UML diagrams. Systems are welcome
to use these object models as a basis for serialization internally or even
between trading partner systems, with any form of exchange technology (including 
JSON). Systems that use this form of exchange cannot claim to be conformant 
with this specification, but can describe themselves as using "FHIR consistent
object models".
</p>

<%footer%>
<%/maindiv%>    
</body>
</html>