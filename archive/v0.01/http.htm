<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  <!-- -

list from Kevin:
OPERATE
CREATE
READ
UPDATE
APPEND
ANNOTATE
DELETE
PURGE
EXECUTE
REPRODUCE
COPY
BACKUP
RESTORE
EXPORT
PRINT
DERIVE
CONVERT
EXCERPT
TRANSLATE
MOVE
ARCHIVE
REPLACE
FORWARD
TRANSFER
SIGN
VERIFY
--------
RESTRICT
IMPORT
OBSOLETE
ABORT
COMPLETE
CANCEL
RELEASE
SUSPEND
RESUME
ACTIVATE
REACTIVATE
NULLIFY
HOLD

 --><html>
<head>
    <title>HTTP/RESTful Framework - FHIR v0.01</title>
    <link rel="Stylesheet" type="text/css" media="screen" href="fhir.css"/>
</head>

<body>
<div class="header">
  <a title="Fast Healthcare Interoperability Resources - Home Page" href="http://www.hl7.org/fhir"><img style="vertical-align: text-bottom" src="flame16.png"/> <b>FHIR</b></a>
 
  Â© HL7.org 2011-2012
  &nbsp;
  &nbsp;
  &nbsp;
  <a href="print-http.htm"><b>Printable Version </b></a>
  &nbsp;
  &nbsp;
  <a href="http://wiki.hl7.org/index.php?title=FHIR_Http_Page"><b>Wiki for this page</b></a> &nbsp;
  <!-- -  <a href="authoring.htm">Authoring Guidelines</a>  -->
  <br/>
  <span style="font-weight: bold; color: Maroon"><img src="warning.png"/> This is an old version of FHIR retained for archive purposes. Do not use for anything else</span>
  
</div>
<div class="sidebar">
  <h2>Infrastructure</h2>
  <ul>
   <li><a href="introduction.htm">Introduction</a></li>
   <li><a href="xml.htm">Resource Format</a></li>
   <li><a href="datatypes.htm">Data Types</a></li>
   <li style="display: none"><a href="mixins.htm">Mixins</a></li>
   <li><a href="terminologies.htm">Terminologies</a></li>
   <li><a href="extensibility.htm">Extensibility</a></li>
   <li><a href="constraint.htm">Constraint</a></li>
  </ul> 

  <h2>Exchange</h2>
  <ul>
   <li><a href="implementation.htm">Implementation</a></li>
   <li><a href="atom.htm">Aggregations</a></li>
   <li><a href="http.htm">REST (HTTP)</a></li>
   <li style="display: none"><a href="conformance.htm">RESTful Conformance Statement</a></li>
   <li><a href="messaging.htm">Messaging</a></li>
   <li style="display: none"><a href="message.htm">Message Resource</a></li>
   <li style="display: none"><a href="messageconformance.htm">Messaging Conformance Statement</a></li>
   <li><a href="documents.htm">Documents</a></li>
   <li style="display: none"><a href="documentconformance.htm">Document Conformance Statement</a></li>
   <li><a href="hdata.htm">hData Integration</a></li>
   <li><a href="profile.htm">Resource Profile</a></li>
  </ul> 

  <h2>Administrative Resources</h2>
  <ul>
   <li><a href="person.htm">Person</a></li>
   <li><a href="animal.htm">Animal</a></li>
   <li><a href="organization.htm">Organization</a></li>
   <li><a href="agent.htm">Agent</a></li>
   <li><a href="patient.htm">Patient</a></li>
   <li><a href="document.htm">Document</a></li>
   <li>Clinics</li>
   <li>Admissions</li>
   <li>Appointments</li>
   <li>InterestOfCare</li>
   <li>Transfers</li>
  </ul> 
  <h2>Clinical Components</h2>
  <ul>
   <li>Vitals etc</li>
   <li><a href="labreport.htm">Lab Report</a></li>
   <li>Imaging Report</li>
   <li>Alert</li>
   <li>Procedure </li>
   <li>Consultation</li>
   <li>Problem</li>
   <li>Immunization</li>
   <li>Diet</li>
   <li>Implant</li>
  </ul> 
  <h2>Medications</h2>
  <ul>
   <li>Instruction</li>
   <li><a href="prescription.htm">Prescription</a></li>
   <li>Dispense</li>
  </ul> 
  <h2>Care management</h2>
  <ul>
   <li>Care Plan</li>
  </ul> 
  <h2>Documents</h2>
  <ul>
   <li>Discharge Summary</li>
   <li>Transition Request</li>
   <li>Notes</li>
   <li>Letters</li>
  </ul> 
</div>

<div class="content">
<h1>RESTful HTTP Details</h1>

<p>
In addition to defining a set of base resources, FHIR also provides a RESTful implementation using HTTP. 
Each resource type has the same set of interactions defined that can be used to manage the resources 
in a highly granular fashion. Applications claiming conformance to this framework
claim to be conformant to &quot;RESTful FHIR&quot;.
</p>
<p>
Note that this RESTful framework adheres as closely as possible to the REST principles. Transactions 
are performed directly on the server resource using an HTTP request/response. The HTTP calls may be
authenticated against a single user account (including using OAuth), but this doesn't cater for common transaction metadata
such as multiple users, responsible party, reasons, consents etc that is commonly encountered in healthcare. Instead, it is assumed that appropriate
security and logs are managed by the client (perhaps through using ATNA), and the server trusts the client to maintain
these. One implication of this is that this RESTful framework is only suitable for use where such 
trust relationships exist (e.g. in a single institution), and not suitable where such trust does not exist 
(e.g. state &amp; national EHR systems, and general internet-based ecosystems). Similarly, this simple 
RESTful interface has no support for explicit archiving, for instance. These type of more sophisticated usages
should consider a <a href="messaging.htm">messaging</a> or <a href="implementation.htm#SOA">SOA-based approach</a>, or 
some kind of profiled REST interface, such as <a href="hdata.htm">hData</a>.
</p>
<p>
The following logical interactions are supported:
</p>
<a name="interactions"/>
<table class="list"> 
  <tr><td><b>Instance</b></td><td/></tr>
  <tr><td><a href="#read">read</a></td><td>Read the current state of the resource</td></tr>
  <tr><td><a href="#vread">vread</a></td><td>A version specific read of the resource</td></tr>
  <tr><td><a href="#update">update</a></td><td>Update an existing resource by it's id (or create it if it is new)</td></tr>
  <tr><td><a href="#delete">delete</a></td><td>Delete a resource</td></tr>
  <tr><td><a href="#validate">validate</a></td><td>Check that the content would be acceptable as an update</td></tr>
  <tr><td><a href="#history">history</a></td><td>Retrieve the update history for the resource</td></tr>
  <tr><td><a href="#transaction">transaction</a></td><td>Support for specific transactions defined on the resource</td></tr>
  <tr><td colspan="2"><b>Manager</b></td></tr>
  <tr><td><a href="#search">search</a></td><td>Search the resource type based on some filter criteria</td></tr>
  <tr><td><a href="#create">create</a></td><td>Create a new resource with a server assigned id</td></tr>
  <tr><td><a href="#updates">updates</a></td><td>Get a list of updates to resources of this type, optionally with some filter criteria</td></tr>
  <tr><td><a href="#transaction">transaction</a></td><td>Support for specific transactions defined on the resource type</td></tr>
  <tr><td><a href="#conformance">conformance</a></td><td>Get a conformance statement for support of this resource type</td></tr>
  <tr><td><a href="#schema">schema</a></td><td>Get the XML schema for this resource</td></tr>
</table>

<p>
Note that while these same logical interactions are defined on all
resources, applications are not required to implement all of them. 
An application's <a href="conformance.htm">conformance statement</a> must say what logical interactions 
are supported.
</p>


<h2>Base URL</h2>
<p>
Each resource lives at a specific location with a known URL 
which is automatically determined from the id, the resource 
type, and the base url of the system.
</p>
<p>
The concept of the base URL is defined because because this specification 
defines an interface rather than any particular system. The base URL 
is the address at which all the resources defined by this 
interface are found. The base URL takes the form of 
</p>
<pre>
http(s)://server/path
</pre>
<p>
The path may end with a trailing slash or not. Each 
resource defined in this specification has a manager
that lives at the address &quot;/[type name]&quot; where type 
name is the name of the type in lower case and plural. 
So, for instance, the resource manager for the type 
&quot;Patient&quot; will live at:
</p>
<pre>
http://server/path/patients
</pre>
<p>
Note that applications may need to remove the trailing
slash from the base URL when appending the resource 
address. All the logical operations are provided 
relative to the address of the resource and defined in 
these terms below. Note that this 
means that given the address of any one resource on a
system, the correct address for all the other resources 
may be determined.

However since application URLs may change, and because local configuration
may dictate that the provider of a resource is different
to that claimed by any particular provider or consumer, 
applications should be adroit at replacing base URLs.
</p>


<h2>HTTP Status Codes</h2>
<p>
For all interactions, if the requested resource is returned as requested, the HTTP status 200 OK 
should be used (except for &quot;create&quot; where the status code should be 201). 
If the resource is not known, the server should return an HTTP status code 404 Not Found. 
Other HTTP errors may be returned as appropriate. 
</p>
<p>
An HTTP redirect should not be used to indicate that the master id has changed. This is because 
the ids are treated as stable references elsewhere and used for matching. Changing an id will 
cause problems with this matching. Redirects may be issued to redirect to a new base URL, or
to a master system for a given resource.  
</p>

<h2>Resource Metadata &amp; Versioning</h2>
<p>
Each resource has an associated set of <a href="xml.htm#metadata">resource metadata</a>. These map to the http request and response using the following fields:
</p>
<table class="grid">
  <tr><th>Metadata Item</th><th>HTTP Response Header</th></tr>
  <tr><td>Version Id</td><td>ETag</td></tr>
  <tr><td>Last Modified Date</td><td>Last-Modified</td></tr>
  <tr><td>Master Location</td><td>Content-Location</td></tr>
</table>


<h2>Security</h2>
<p>
For this specification, normal HTTP security and authentication
rules apply. The base URL will specify whether SSL is 
required. HTTP authentication, including possibly the requirement for 
client certificates, may be required by the provider. 
It is a matter of application requirements and local 
configuration whether all interactions run under the account of 
a trusted system user, or whether each interaction runs under the 
account of the individual user. 
</p>
<p>
All the URLs defined below may be extended to support the OAuth protocol. 
</p>
<h2>Content Types &amp; File Extensions</h2>
<p>
This same RESTful protocol may be used with either the XML or JSON representations <a href="xml.htm">defined for resources</a>.
The mime types text/xml and application/json are to be used in the HTTP Content-Type or Accept header respectively to indicate which 
form is the requested or returned content takes . In addition, the URLs defined below may have the file extensions 
.xml or .json may be appended to the URL where appropriate, as indicated by <i>(.ext)</i> below. For reasons of general compatibility, servers and clients may accept application/xml, but must specify text/xml themselves.
</p>
<p>
Servers are required to support the XML form. Support for the JSON format is optional. Servers must support the 
Content-Type and Accept headers. Because of established browser behaviour, file extensions in the URL overrule the 
values specified in the headers. 
</p>
<a name="read"> </a>
<h2>read</h2>
<p>
The read interaction accesses the current contents of a resource. The interaction
is performed by an HTTP GET operation as shown:
</p>
<pre>
  GET [baseurl]/[resourcetype]/{@id} (.ext)
</pre>
<p>
This returns a single instance with the content that which is specified for the resource type.
This url may be accessed by a browser. The id is preceded by a &quot;:&quot; to make parsing the url easier.
The possible values for the id itself are described in the <a href="xml.htm#Resource">Resource Type</a>.
The http headers ETag, and Last-Modified must be returned by the server, and the Content-Location should be 
returned. 
</p>

<a name="vread"> </a>
<h2>vread</h2>
<p>
The vread interaction preforms a version specific read of the resource. The interaction
is performed by an HTTP GET operation as shown:
</p>
<pre>
  GET [baseurl]/[resourcetype]/{@id}/version-{:vid} (.ext)
</pre>
<p>
This returns a single instance with the content that which is specified for the resource type.
This url may be accessed by a browser. The http headers ETag, and Last-Modified, must be returned by the server, and are the values that apply for this version of the resource.
</p>
<p>
The version id is an opaque identifier that conforms to the same format requirements as 
a resource id. The id may be found by performing a history operation (see below), by recording the 
ETag return with a normal fetch operation, or from a version specific reference in a content model. 
The vread interaction should succeed even after a resource is deleted as long as a correct version 
identifier is provided. 
</p>

<a name="update"> </a>
<h2>update</h2>
<p>
The update interaction changes an existing resource, or creates a new resource of it doesn't already exist. 
The update interaction is performed by an HTTP PUT operation as shown:
</p>
<pre>
  PUT [baseurl]/[resourcetype]/{@id} (.ext)
</pre>
<p>
The server returns a copy of the newly updated resource (which may not be the same as that submitted) with the response.
</p>
<p>
Servers may choose to require version checking, and only accept submitted updates that have an If-Match header that
contains a matching version id for the current version of the resource. According to the http specification, it's 
up to the client to decide whether to provide an If-Match header, and if it does, the server must observe it. 
On normal update operations the client should not provide an If-Match header, and if the server wishes to receive it,
it should return a 412 error with the words &quot;If-Match&quot; in the response text. Upon receiving this error, the client
should resubmit with the If-Match header, if it is able. The Last-Modified dateTime may not suitable for concurrency
checking as it only has a resolution limit of per-second, and there are other problems with dates as well.
</p>
<a name="delete"> </a>
<h2>delete</h2>
<p>
The delete interaction removes an existing resource. The interaction
is performed by an HTTP DELETE operation as shown:
</p>
<pre>
  DELETE [baseurl]/[resourcetype]/{@id} (.ext)
</pre>
<p>
Servers may refuse to delete a resource depending on the resource type and/or contents, and on audit requirements. If a server refuses 
to delete resources of that type on principle, then it should return the status code 405 method not allowed. 
If the server refuses to delete a resource because of reasons specific to that resource, such as 
referential integrity, it should return the status code 412 Expectation Failed.
</p>

<a name="validate"> </a>
<h2>validate</h2>
<p>
The validate interaction checks whether the attached content would be acceptable as an 
update to an existing resource. The interaction is performed by an HTTP POST operation as shown:
</p>
<pre>
  POST [baseurl]/[resourcetype]/validate
  POST [baseurl]/[resourcetype]/validate/{@id}
</pre>
<p>
In the first case, the content is checked against the general specification and against 
the conformance profile that applies to the application. In the second case, the validation 
occurs as if the resource were submitted as an update, and additional instance specific things 
such as referential integrity and update rules are applied as well.
The return content has status 200 OK if the content validates ok, or 412 Precondition Failed,
with the following content:
</p>
<pre>
 &lt;<b>validation</b> xmlns=&quot;http://www.hl7.org/fhir&quot;&gt;
   &lt;<b>error</b> <a class="cf" href="xml.htm#Control">mand</a> <font color="darkgreen">type=&quot;<a href="datatypes.htm#string">string</a>&quot;</font>&gt;<font color="navy">General error message</font>&lt;/errror&gt;  
   &lt;<b>messages</b> <font color="darkgreen">type=&quot;list&quot;</font>&gt;   <font color="Gray">&lt;!-- Zero+ --&gt;</font>
     &lt;<b>message</b>&gt;
       &lt;<b>path</b> <a class="cf" href="xml.htm#Control">opt</a> <font color="darkgreen">type=&quot;string&quot;</font><font color="navy">xpath to the issue</font>&lt;/path&gt;
       &lt;<b>error</b> <a class="cf" href="xml.htm#Control">mand</a> <font color="darkgreen">type=&quot;string&quot;</font>&gt;<font color="navy">Description of the problem</font>&lt;/error&gt;
     &lt;/message&gt;
   &lt;messages&gt;
 &lt;/validation&gt;
</pre>

<a name="history"> </a>
<h2>history</h2>
<p>
The history interaction retrieves the history of the resource. The interaction is performed by an HTTP Get operation as shown:
</p>
<pre>
  GET [baseurl]/[resourcetype]/{@id} (.ext)?view=history
</pre>
<p>
The return content is an <a href="atom.htm#Aggregation">Atom feed aggregration</a> containing the version history for that 
resource, sorted with oldest versions first.
</p>
<a name="search"> </a>
<h2>search</h2>
<p>
This interaction searches the resource type based on some filter criteria. The interaction is performed by an HTTP Get operation as shown:
</p>
<pre>
  GET [baseurl]/[resourcetype]/search (.ext)
</pre>
<p>
Because of the way that some user agents treat POST requests, POST submissions are also allowed, though the semantics are exactly the 
same as a GET operation. Search operations take a series of parameters that are encoded in the URL or as an x-multi-part-form submission
for a POST. Each resource type defines the applicable search parameters, and servers may declare additional parameters in their 
conformance statements. In addition, the following common search parameters apply to all resource types:
</p>
<table class="list">
  <tr><td>n</td><td>Starting offset of the first record to return in the search set</td></tr>
  <tr><td>count</td><td>Number of return records requested. The server is not bound to conform.</td></tr>
  <!-- - <tr><td>[path]</td><td>a value to match in the content model.</td></tr>  -->
  <!-- -The path is a reference to an element in the content model. The general form is [name].[name] etc. 
So to search by a patient telephone number, the parameter would be contacts.contact.value, and the 
value of the parameter would be tel:[#].  -->
</table>
<p>
The search results may be divided into a number of pages using offsets. 
It is at the discretion of the server how many results to return, though
the client may request a particular number of a <i>count</i> parameter. If
the client wishes for more results, it should use the <i>n</i> parameter.
More generally, the client uses parameters to narrow the search and 
increase it's usefulness. Note that which parameters to support is at the discretion of the server.
</p>
<p>
The return content is an <a href="atom.htm#Aggregation">Atom feed aggregration</a> containing the results of the search
in a defined order. This specification does not assign any particular meaning to the order of the resources.
</p>

<a name="create"> </a>
<h2>create</h2>
<p>
The create interaction creates a new resource. The interaction
is performed by an HTTP POST operation as shown:
</p>
<pre>
  POST [baseurl]/[resourcetype] (.ext)
</pre>
<p>
The server returns a a copy of the newly created resource (which may not be the same as that submitted) 
with the acknowledgement, along with a Location: header which also contains the id of the created resource:
</p>
<pre>
 Location: [baseurl]/[resourcetype]/{new-id} (.ext)
</pre>
<p>
The client may submit the content with or without an id included. If the submitted resource contains an id, 
the server must either honor the requested id, or return a 409 Conflict if
a resource already exists by that id, or a 403 Forbidden if it will not 
honor client defined ids at all</p>

<a name="updates"> </a>
<h2>updates</h2>
<p>
The updates interaction retrieves a list of changes to the resource type. The interaction is performed by an HTTP Get operation as shown:
</p>
<pre>
  GET [baseurl]/[resourcetype]/updates (.ext)
</pre>
<p>
The return content is an <a href="atom.htm#Aggregation">Atom feed aggregration</a> containing the update history for that 
resource type, sorted with oldest updates first.
</p>
<p>
The client can use parameters to filter the update list. The following table summarises ths search parameters:
</p>
<table class="list">
  <tr><td>since</td><td>The time from which to return new updates</td></tr>
  <tr><td>from</td><td>A version Id (e-tag value) from which to return updates</td></tr>
  <!-- -  <tr><td>[path]</td><td>a value to match in the content model.</td></tr>  -->
</table>
  <!-- -<p>
See search above for details of the [path]. 
</p>  -->

<a name="transaction"> </a>
<h2>transaction</h2>
<p>
The transaction interaction provides support for specific transactions defined against the resource
by this specification. The transaction interaction is supported on both individual resources and the type:
</p>
<pre>
  POST [baseurl]/[resourcetype]/transaction/[name](.ext)
  POST [baseurl]/[resourcetype]/transaction/{@id}/[name](.ext)
</pre>
<p>
The name of the transaction, along with the content model of the request and response will be specified against each resource 
when the possible transactions are defined throughout this specification.
</p>

<a name="conformance"> </a>
<h2>conformance</h2>
<p>
The conformance interaction retrieves the application's conformance statement for the resource. The interaction is performed by an HTTP Get operation as shown:
</p>
<pre>
  GET [baseurl]/[resourcetype]/conformance (.ext)
</pre>
<p>
For the return content, see the <a href="conformance.htm">Conformance Resource</a>. If a 404 Unknown is returned, the resource is not supported, and no other interactions are implemented.
</p>

<a name="schema"> </a>
<h2>schema</h2>
<p>
The schema interaction retrieves a w3c schema for the resource. The interaction is performed by an HTTP Get operation as shown:
</p>
<pre>
  GET [baseurl]/[resourcetype]/schema.xsd
</pre>
<p>
The return content is a W3C schema that describes the resource. The schema does not have to be the one defined 
with this specification; it can eliminate elements not supported by the server, and explicitly define 
extensions supported by the server. However the xml format it describes must be consistent with the 
rules defined in this specification.
</p>

<h2>Intermediaries</h2>
<p>
The HTTP protocol may be routed through an HTTP proxy such as 
squid. Such proxies are transparent to the applications, though
implementors should be alert to the effects of rogue caching.
</p>
<p>
Interface engines may also be placed between the consumer and
the provider; these differ from proxies because they actively
change the content and/or destination of the HTTP exchange.
Such agents are allowed, but are bound to the conform to 
this specification. In order to assist with troubleshooting,
any agent that modifies an HTTP request or Response content must add 
a stamp to the HTTP headers like this:
</p>
<pre>
  request-modified-[identity]: [purpose]
  response-modified-[identity]: [purpose]
</pre>
<p>
The identity must a single token defined by the administrator of the agent
that will sufficiently identify the agent in the context of use. The header
must specify the agents purpose in modifying the content. End point systems must
not use this header for any purpose; it's aim is to assist with 
system troubleshooting.
</p>


<hr/>
<p style="text-align: center">
  <span style="font-weight: bold; color: Maroon"><img src="warning.png"/> This is an old version of FHIR retained for archive purposes. Do not use for anything else</span>
<br/>
Implementers are welcome to experiment with the content defined here, but should note that the contents are subject to change without prior notice.<br/>
  Â© HL7.org 2011 - 2012. FHIR v0.01 generated on Mon, May 14, 2012 09:48+1000. <br/>
</p>



</div>    
<script src="/includes/GoogleAnalyticsAddFileTracking.js" type="text/javascript"/>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-676355-1']);
  _gaq.push(['_setDomainName', '.hl7.org']);
  _gaq.push(['_trackPageview']);
  (function() {    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);  })();
</script>
</body>
</html>